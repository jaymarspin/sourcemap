{"version":3,"sources":["./src/app/services/common/task/task.service.ts","./node_modules/@ionic/core/dist/esm/button-active-a6787d69.js","./node_modules/@ionic/core/dist/esm/theme-ff3fc52f.js","./src/app/components/common/item-err/item-err.module.ts","./src/app/services/common/contact/contact.service.ts","./src/app/components/common/selector/selector.module.ts","./src/app/models/common/model-interest-selector.model.ts","./src/app/components/common/model-interest-selector/model-interest-selector.component.html","./src/app/components/common/model-interest-selector/model-interest-selector.component.ts","./src/app/components/common/contact-search/search-result/search-result.component.ts","./src/app/components/common/contact-search/search-result/search-result.component.html","./src/app/components/common/autocomplete/autocomplete.module.ts","./src/app/pages/offer/edit-offer/edit-offer-routing.keys.ts","./node_modules/@ionic/core/dist/esm/framework-delegate-4584ab5a.js","./src/app/components/common/item-err/item-err.component.html","./src/app/components/common/item-err/item-err.component.ts","./node_modules/@ionic/core/dist/esm/spinner-configs-cd7845af.js","./src/app/services/common/tradein/tradein.service.ts","./src/app/components/common/contact-search/search-result/search-result.module.ts","./src/app/services/common/opportunity/opportunity.service.ts","./node_modules/@ionic/core/dist/esm/haptic-27b3f981.js","./src/app/components/common/autocomplete/autocomplete.component.ts","./src/app/components/common/autocomplete/autocomplete.component.html","./src/app/models/common/auto-complete.model.ts"],"names":["CommonTaskService","taskAPI","errorSrvc","taskMetaParam","startD","endD","taskFilter","search","oppId","id","this","getTasksOffset","e","presentServerErr","getTasks","taskId","trim","getTaskById","task","upsertTask","status","alert","createButtonActiveGesture","el","isButton","currentTouchedButton","initialTouchedButton","activateButtonAtPoint","x","y","hapticFeedbackFn","document","target","elementFromPoint","clearActiveButton","setActiveButton","button","buttonToModify","classList","add","dispatchClick","remove","click","undefined","gestureName","threshold","onStart","ev","currentX","currentY","onMove","onEnd","hostContext","selector","closest","createColorClasses","color","cssClassMap","length","Object","assign","getClassMap","classes","map","Array","isArray","split","filter","c","getClassList","forEach","SCHEME","openURL","async","url","direction","animation","test","router","querySelector","preventDefault","push","ItemErrComponentModule","CommonContactService","contactAPI","contactMetaParam","contacts","recentContacts","asObservable","cities","states","defaultCountryCode","salutation","docType","countryCode","countryList","genderList","raceList","getRecentContacts","pipe","res","updateRecentContactList","mobile","name","getContactByPhoneAndName","searchKey","getContactsByDoc","getContactByMobile","getContactByEmail","getContactByName","getContactById","pickContact","con","Name","formatted","MobileNo","phoneNumbers","value","contact","setContact","getContactVehicleById","fill","_","i","String","fromCharCode","searchByKeyword","searchByName","tempContacts","header","charAt","toLocaleUpperCase","sort","a","b","localeCompare","contactList","curRecentList","newList","curIds","Set","Id","has","next","SelectorComponentModule","CheckboxModel","label","isChecked","ModelInterestSelectorComponent","modalCtrl","err","oppService","tdService","selectedResult","isLoading","modelList","singleSelect","retrieveTDModels","cmp","retrieveVehModelInt","subscribe","vehModel","filteredRes","model","indexOf","ShortDescription","preselectValues","searchResult","logError","evt","keyword","getData","key","val","toUpperCase","selectedModels","emit","dismiss","modelSelected","selectedValues","selectedModel","save","SearchResultComponent","contactService","navCtrl","changes","searchParam","searchContact","console","log","isKeyword","searchContactByKeyword","searchByPhoneAndName","item","navigateForward","BASE","Flag","AutocompleteComponentModule","EditOfferPageRoutingKeys","PARAM_ID","STATE_OPPID","attachComponent","delegate","container","component","cssClasses","componentProps","attachViewToDom","HTMLElement","Error","ownerDocument","createElement","appendChild","componentOnReady","detachComponent","element","removeViewFromDom","parentElement","Promise","resolve","ItemErrComponent","size","control","messages","errors","keys","rv","msg","SPINNERS","dur","circles","fn","index","total","animationDelay","angle","Math","PI","r","style","sin","cos","step","elmDuration","cx","cy","viewBox","transform","lines","y1","y2","CommonTradeinService","tradeinAPI","tradeInId","getTradeIns","tradeIn","upsertTradeIn","getMakes","getPurchasers","getSources","SearchResultComponentModule","CommonOpportunityService","opportunityAPI","opportunityMetaParam","contactId","getOpportunities","getOppInfinite","getOpportunitiesById","getOpportunitiesByKeyword","personId","sc","checkExistingOpportunity","company","getModelInterest","getPPDateRange","getCmpgList","companyName","getSource","opportunity","upsertOpp","vehicleType","starredFilter","HapticEngine","win","window","Capacitor","isPluginAvailable","Plugins","Haptics","getEngine","isCordova","TapticEngine","isCapacitor","options","engine","impact","notification","selectionStart","gestureSelectionStart","selectionChanged","gestureSelectionChanged","selectionEnd","gestureSelectionEnd","hapticSelection","selection","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd","hapticImpact","AutocompleteComponent","errService","searchSubj","callbackFn","rawResult","transformFn","paramInd","result","searchInput","noResultFn","onBlur","AutoCompleteModel","values"],"mappings":"6FACA,oFAcO,Y,MAAMA,EACX,YAA8CC,EAA2BC,EAAwDC,GAAnF,KAAAF,UAA2B,KAAAC,YAAwD,KAAAC,gBAEjI,eAAeC,EAAgBC,EAAcC,EAA6BC,EAAgBC,GACxF,MAAMC,EAAKD,GAAgB,GAC3B,IACE,OAAOE,KAAKT,QAAQU,eAAeP,EAAQC,EAAMC,EAAYC,EAAQE,GACrE,MAAOG,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,SAASR,EAAgBC,EAAcE,EAAgBC,GACrD,MAAMC,EAAKD,GAAgB,GAC3B,IACE,OAAOE,KAAKT,QAAQa,SAASV,EAAQC,EAAME,EAAQE,GACnD,MAAOG,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,YAAYG,GACV,IACE,GAAIA,GAAUA,EAAOC,OACnB,OAAON,KAAKT,QAAQgB,YAAYF,GAElC,MAAOH,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,WAAWM,GACT,IACE,OAAOR,KAAKT,QAAQkB,WAAWD,GAC/B,MAAON,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,YACE,OAAOF,KAAKP,cAAciB,OAG5B,gBACE,OAAOV,KAAKP,cAAckB,O,6CA5CjBrB,GAAiB,KACR,KAAgB,eAAsE,O,yBAD/FA,EAAiB,QAAjBA,EAAiB,qBAFhB,S,GAEP,I,oCCfP,wEAIA,MAAMsB,EAA4B,CAACC,EAAIC,KACrC,IAAIC,EACAC,EACJ,MAAMC,EAAwB,CAACC,EAAGC,EAAGC,KACnC,GAAwB,oBAAbC,SACT,OAEF,MAAMC,EAASD,SAASE,iBAAiBL,EAAGC,GACvCG,GAAWR,EAASQ,GAIrBA,IAAWP,IACbS,IACAC,EAAgBH,EAAQF,IALxBI,KAQEC,EAAkB,CAACC,EAAQN,KAC/BL,EAAuBW,EAClBV,IACHA,EAAuBD,GAEzB,MAAMY,EAAiBZ,EACvB,YAAU,IAAMY,EAAeC,UAAUC,IAAI,kBAC7CT,KAEII,EAAoB,CAACM,GAAgB,KACzC,IAAKf,EACH,OAEF,MAAMY,EAAiBZ,EACvB,YAAU,IAAMY,EAAeC,UAAUG,OAAO,kBAS5CD,GAAiBd,IAAyBD,GAC5CA,EAAqBiB,QAEvBjB,OAAuBkB,GAEzB,OAAO,wBAAc,CACnBpB,KACAqB,YAAa,mBACbC,UAAW,EACXC,QAASC,GAAMpB,EAAsBoB,EAAGC,SAAUD,EAAGE,SAAU,KAC/DC,OAAQH,GAAMpB,EAAsBoB,EAAGC,SAAUD,EAAGE,SAAU,KAC9DE,MAAO,KACLjB,GAAkB,GAClB,cACAR,OAAuBiB,O,oCC1D7B,sIAAMS,EAAc,CAACC,EAAU9B,IACG,OAAzBA,EAAG+B,QAAQD,GAKdE,EAAqB,CAACC,EAAOC,IACR,iBAAVD,GAAsBA,EAAME,OAAS,EAAKC,OAAOC,OAAO,CAAE,aAAa,EAAM,CAAC,aAAaJ,IAAU,GAAQC,GAAeA,EAYvII,EAAeC,IACnB,MAAMC,EAAM,GAEZ,MAbmB,CAACD,QACJnB,IAAZmB,GACYE,MAAMC,QAAQH,GAAWA,EAAUA,EAAQI,MAAM,MAE5DC,OAAOC,GAAU,MAALA,GACZL,IAAIK,GAAKA,EAAEpD,QACXmD,OAAOC,GAAW,KAANA,GAEV,GAIPC,CAAaP,GAASQ,QAAQF,GAAKL,EAAIK,IAAK,GACrCL,GAEHQ,EAAS,uBACTC,EAAUC,MAAOC,EAAK3B,EAAI4B,EAAWC,KACzC,GAAW,MAAPF,GAA0B,MAAXA,EAAI,KAAeH,EAAOM,KAAKH,GAAM,CACtD,MAAMI,EAAS/C,SAASgD,cAAc,cACtC,GAAID,EAIF,OAHU,MAAN/B,GACFA,EAAGiC,iBAEEF,EAAOG,KAAKP,EAAKC,EAAWC,GAGvC,OAAO,I,kCCnCT,oFAWO,Y,MAAMM,G,8BAAAA,I,oDAAAA,IAAsB,SAJxB,CAAC,IAAc,KAAa,Q,GAIhC,I,kCCTP,4JAcO,Y,MAAMC,EACX,YACuCC,EAC7BlF,EAC0BmF,EAC1BC,GAH6B,KAAAF,aAC7B,KAAAlF,YAC0B,KAAAmF,mBAC1B,KAAAC,WAGF,KAAAC,eAAkD,IAAI,IAAgB,IAEvE,oBACL,OAAO7E,KAAK6E,eAAeC,eAG7B,YACE,OAAO9E,KAAK2E,iBAAiBI,OAG/B,YACE,OAAO/E,KAAK2E,iBAAiBK,OAG/B,wBACE,OAAOhF,KAAK2E,iBAAiBM,mBAG/B,uBACE,OAAOjF,KAAK2E,iBAAiBO,WAG/B,oBACE,OAAOlF,KAAK2E,iBAAiBQ,QAG/B,qBACE,OAAOnF,KAAK2E,iBAAiBS,YAG/B,iBACE,OAAOpF,KAAK2E,iBAAiBU,YAG/B,YACE,OAAOrF,KAAK2E,iBAAiBW,WAG/B,UACE,OAAOtF,KAAK2E,iBAAiBY,SAG/B,oBACE,IACE,OAAOvF,KAAK0E,WAAWc,oBAAoBC,KACzC,YAAKC,IACH1F,KAAK2F,wBAAwBD,MAGjC,MAAOxF,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,qBAAqB0F,EAAgBC,GACnC,IACE,GAAKD,GAAUA,EAAOtF,QAAYuF,GAAQA,EAAKvF,OAC7C,OAAON,KAAK0E,WAAWoB,yBAAyBF,EAAQC,GAE1D,MAAO3F,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,eAAe6F,GACb,IACE,GAAIA,GAAaA,EAAUzF,OACzB,OAAON,KAAK0E,WAAWsB,iBAAiBD,GAE1C,MAAO7F,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,oBAAoB6F,GAClB,IACE,GAAIA,GAAaA,EAAUzF,OACzB,OAAON,KAAK0E,WAAWuB,mBAAmBF,GAE5C,MAAO7F,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,cAAc6F,GACZ,IACE,GAAIA,GAAaA,EAAUzF,OACzB,OAAON,KAAK0E,WAAWwB,kBAAkBH,GAE3C,MAAO7F,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,aAAa6F,GACX,IACE,OAAO/F,KAAK0E,WAAWyB,iBAAiBJ,GACxC,MAAO7F,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,eAAe6F,GACb,IACE,GAAIA,GAAaA,EAAUzF,OACzB,OAAON,KAAK0E,WAAW0B,eAAeL,GAAWN,KAC/C,YAAKC,IACH1F,KAAK2F,wBAAwB,CAACD,OAIpC,MAAOxF,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,gBACE,IACE,OAAO,YAAKF,KAAK4E,SAASyB,eAAeZ,KACvC,YAAKvF,IACH,MAAMoG,EAAM,IAAI,IAOhB,OANAA,EAAIC,KAAOrG,EAAE2F,KAAKW,UAEhBF,EAAIG,SADiB,OAAnBvG,EAAEwG,aACWxG,EAAEwG,aAAa,GAAGC,MAAMrG,OAExB,KAEVgG,KAGX,MAAOpG,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,cAAc0G,GACZ,IACE,OAAO5G,KAAK0E,WAAWmC,WAAWD,GAClC,MAAO1G,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,sBAAsBH,GACpB,IACE,OAAOC,KAAK0E,WAAWoC,sBAAsB/G,GAC7C,MAAOG,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,kBACE,OAAO,IAAIoD,MAAM,IAAIyD,KAAK,GAAG1D,IAAI,CAAC2D,EAAGC,IAAMC,OAAOC,aAAa,GAAKF,IAGtE,uBAAuBlB,GACrB,IACE,OAAO/F,KAAK0E,WAAW0C,gBAAgBrB,GACvC,MAAO7F,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,sBAAsB6F,GACpB,OAAO/F,KAAKqH,aAAatB,GAAWN,KAClC,YAAKvF,IACH,MAAMoH,EAAe,IAAIhE,MAqBzB,OApBApD,EAAE0D,QAAS/C,IACLyG,EAAatE,OAAS,GACxBsE,EAAa/C,KAAK,CAChBgD,OAAQ1G,EAAG0F,KAAKiB,OAAO,GAAGC,oBAC1B7C,SAAU,KAEZ0C,EAAaA,EAAatE,OAAS,GAAG4B,SAASL,KAAK1D,KAEhDyG,EAAaA,EAAatE,OAAS,GAAGuE,SAAW1G,EAAG0F,KAAKiB,OAAO,GAAGC,qBAGrEH,EAAa/C,KAAK,CAChBgD,OAAQ1G,EAAG0F,KAAKiB,OAAO,GAAGC,oBAC1B7C,SAAU,KAJZ0C,EAAaA,EAAatE,OAAS,GAAG4B,SAASL,KAAK1D,MAU1DyG,EAAaI,KAAK,CAACC,EAAGC,IAAMD,EAAEJ,OAAOM,cAAcD,EAAEL,SAC9CD,KAKL,wBAAwBQ,GAC9B,MAAMC,EAAgB/H,KAAK6E,eAAe8B,MACpCqB,EAAU,IAAIF,GACdG,EAAS,IAAIC,IACnB,IAAK,MAAMtB,KAAWkB,EACpBG,EAAOpG,IAAI+E,EAAQuB,IAErB,IAAK,MAAMvB,KAAWmB,EACfE,EAAOG,IAAIxB,EAAQuB,KACtBH,EAAQzD,KAAKqC,GAGjB5G,KAAK6E,eAAewD,KAAKL,I,6CApNhBvD,GAAoB,KAErB,KAAmB,eAEnB,KAAgB,Y,yBAJfA,EAAoB,QAApBA,EAAoB,qBAFnB,S,GAEP,I,oCChBP,oFAWO,Y,MAAM6D,G,8BAAAA,I,oDAAAA,IAAuB,SAJzB,CAAC,IAAc,KAAa,Q,GAIhC,I,8FCXA,MAAMC,EAKX,YAAYC,EAAe7B,GACzB3G,KAAKwI,MAAQA,EACbxI,KAAK2G,MAAQA,EACb3G,KAAKyI,WAAY,G,sFCDjB,qBACE,sBACE,sBACF,OACF,Q,uCAGE,mBACE,oBAAW,QAAiB,OAC5B,yBAA8B,+EAA4B,yFAAgD,OAC5G,O,iCAFa,mCACmB,qC,yBAHlC,QACE,2BAIF,Q,yBAJa,+C,uCAMb,mBACE,oBAAW,QAAiB,OAC5B,yBAA8B,kEAA4B,oFAAgD,OAC5G,O,4BAFa,mCACmB,qCCT7B,Y,MAAMC,EAcX,YAAoBC,EAAoCC,EAA2BC,EAA0CC,GAAzG,KAAAH,YAAoC,KAAAC,MAA2B,KAAAC,aAA0C,KAAAC,YARnH,KAAAC,eAAiB,IAAI,IAMxB,KAAAC,WAAY,EAInB,YACOhJ,KAAKiJ,WAAajJ,KAAKiJ,UAAUjG,QAAU,GAC7ChD,KAAKkJ,aAAelJ,KAAK8I,UAAUK,iBAAiB,IAAIjB,IAAI,CAAClI,KAAKoJ,OAASpJ,KAAK6I,WAAWQ,oBAAoB,IAAInB,IAAI,CAAClI,KAAKoJ,QAAQE,UACnI5D,IAGC,GAFA1F,KAAKuJ,SAAW7D,EAChB1F,KAAKiJ,UAAY,IAAI3F,MACjBtD,KAAKuJ,SAAU,CACjB,MAAMC,EAAwB,GAC9B,IAAK,MAAMC,KAASzJ,KAAKuJ,SACnBC,EAAYE,QAAQD,EAAME,kBAAoB,IAChDH,EAAYjF,KAAKkF,EAAME,kBACvB3J,KAAKiJ,UAAU1E,KAAK,IAAIgE,EAAckB,EAAME,iBAAkBF,EAAMtB,MAI1EnI,KAAK4J,kBACA5J,KAAK6J,eACR7J,KAAK6J,aAAe7J,KAAKiJ,WAE3BjJ,KAAKgJ,WAAY,GAElBJ,IACC5I,KAAK4I,IAAIkB,SAASlB,GAClB5I,KAAKgJ,WAAY,KAIrBhJ,KAAKgJ,WAAY,EACjBhJ,KAAK4J,kBACA5J,KAAK6J,eACR7J,KAAK6J,aAAe7J,KAAKiJ,YAK/B,YAAYT,GACNxI,KAAKkJ,cACPlJ,KAAKiJ,UAAUrF,QAAS6F,IAClBA,EAAMhB,WAAaD,IAAUiB,EAAMjB,QACrCiB,EAAMhB,WAAY,KAM1B,OAAOsB,GACL,IAAKA,IAAQA,EAAIzI,OACf,OAGF,IAAI0I,EADWD,EAAIzI,OACEqF,MACrB3G,KAAKgJ,WAAY,EACbgB,GAAWA,EAAQ1J,QACrB0J,EAAUA,EAAQ1J,OAClBN,KAAKiK,QAAQD,IAEbhK,KAAK6J,aAAe7J,KAAKiJ,UAE3BjJ,KAAKgJ,WAAY,EAGnB,QAAQkB,GACDlK,KAAKiJ,YAGVjJ,KAAKgJ,WAAY,EACjBhJ,KAAK6J,aAAe7J,KAAKiJ,UAAUxF,OAAQ0G,IACzC,GAAIA,EAAI3B,MAAM4B,cAAcV,QAAQQ,EAAIE,gBAAkB,EACxD,OAAOD,KAKb,QAAQE,GACFA,GACFrK,KAAK+I,eAAeuB,KAAKD,GACzBrK,KAAK2I,UAAU4B,QAAQF,IAEvBrK,KAAK2I,UAAU4B,UAInB,OACEvK,KAAKwK,cAAgBxK,KAAKiJ,UAAUxF,OAAQ0G,GACnCA,EAAI1B,WAEbzI,KAAKuK,QAAQvK,KAAKwK,eAGZ,kBACFxK,KAAKyK,gBACPzK,KAAKyK,eAAe7G,QAAS8G,IAC3B1K,KAAKiJ,UAAUrF,QAAS6F,IAClBiB,EAAcN,gBAAkBX,EAAMjB,MAAM4B,gBAC9CX,EAAMhB,WAAY,Q,6CA9GjBC,GAA8B,2C,uBAA9BA,EAA8B,gE,GAAA,K,KAC9B,KAAY,G,8iBDdzB,qBACE,sBACE,0BAA+E,oCAAa,EAAA7I,OAAA,IAAb,CAA4B,8BAAc,EAAA0K,YAAW,OACtI,OACF,OACA,sBACE,mBACE,2BAKA,2BAAkB,6BAAkB,OACpC,+BAMA,2BAAkB,0BAAc,OAChC,4BAIF,OACF,OACA,wBACE,uBACE,wBAA2B,+BAAS,EAAAI,SAAQ,mBAAO,OACrD,OACF,Q,MAvBe,iCAMoB,oCAOJ,yC,yGCPxB,I,kCCVP,oI,sBCAM,oBACE,YAAG,Q,oBAA6C,OAClD,Q,MADK,qD,sBAEL,oBACE,YAAG,Q,oBAA+C,OACpD,Q,MADK,uD,sBAGP,oBACE,sBACE,YACE,YAAG,Q,oBAAuC,OAC5C,OACF,OACF,Q,MAHS,+C,sBAKX,oBACE,kBACE,qBACE,uBACE,sBACF,OACF,OACF,OACF,Q,yBAUU,uBACE,QACF,Q,8BADE,+C,uCAPN,sBAAsE,mFAEpE,sBACE,uBACE,QACF,OACA,6BAGF,OACF,O,4BANM,0CAE6B,8CDvBpC,Y,MAAMC,EAQX,YAAoBC,EAA8CC,GAA9C,KAAAD,iBAA8C,KAAAC,UAHlE,KAAA9B,WAAY,EACZ,KAAA5D,YAAc,IAAYA,YAI1B,YAAY2F,GACN/K,KAAKgL,YACPhL,KAAKiL,gBAELjL,KAAKwF,oBAIT,WACExF,KAAKwF,oBACL0F,QAAQC,IAAI,aACZD,QAAQC,IAAInL,KAAKF,OAGnB,gBACEE,KAAK8H,YAAc,GACnB9H,KAAKgJ,WAAY,EACbhJ,KAAKoL,UACPpL,KAAK6K,eAAeQ,uBAAuBrL,KAAKgL,YAAYzE,MAAM+C,UAC/DpJ,IACCF,KAAK8H,YAAc5H,EACnBF,KAAKgJ,WAAY,GAElBJ,IACC5I,KAAKgJ,WAAY,IAIrBhJ,KAAK6K,eAAeS,qBAAqBtL,KAAKgL,YAAYvE,SAAUzG,KAAKgL,YAAYzE,MAAM+C,UACxFpJ,IACCF,KAAK8H,YAAc5H,EACnBF,KAAKgJ,WAAY,GAElBJ,IACC5I,KAAKgJ,WAAY,IAMzB,oBACEhJ,KAAK8H,YAAc,GACnB9H,KAAKgJ,WAAY,EACjBhJ,KAAK6K,eAAerF,oBAAoB8D,UACrCpJ,IACCF,KAAK8H,YAAc5H,EACnBF,KAAKgJ,WAAY,GAElBJ,IACC5I,KAAKgJ,WAAY,IAKvB,YAAYuC,GAERvL,KAAK8K,QAAQU,gBADI,UAAfxL,KAAKF,MACsB,IAA2B2L,KAAO,IAAMF,EAAKpD,GAE7C,CAAC,GAAG,IAAoCsD,QAAQzL,KAAKF,SAASyL,EAAKpD,OAIpG,WAAWoD,GACT,OAAIA,EAAKG,KACA,QAEA,iB,6CA5EAd,GAAqB,uB,uBAArBA,EAAqB,qrBCblC,qBACE,oBACE,kBACE,4BAGA,4BAGF,OACA,0BAOF,OACA,0BASA,kBACE,kBACE,mBACE,4BAWF,OACF,OACF,OACF,Q,MAzCkB,oCAGA,mCAIiB,uEAQvB,iCAYuB,wC,4aDjB5B,I,kCEbP,oFAWO,Y,MAAMe,G,8BAAAA,I,oDAAAA,IAA2B,SAJ7B,CAAC,IAAc,KAAa,Q,GAIhC,I,kCCXP,gCAAO,MAAMC,EAA2B,CACtCH,KAAM,aACNI,SAAU,MACVC,YAAa,Q,kCCHf,sEAAMC,EAAkBhI,MAAOiI,EAAUC,EAAWC,EAAWC,EAAYC,KACzE,GAAIJ,EACF,OAAOA,EAASK,gBAAgBJ,EAAWC,EAAWE,EAAgBD,GAExE,GAAyB,iBAAdD,KAA4BA,aAAqBI,aAC1D,MAAM,IAAIC,MAAM,iCAElB,MAAM1L,EAA2B,iBAAdqL,EACfD,EAAUO,eAAiBP,EAAUO,cAAcC,cAAcP,GACjEA,EAWJ,OAVIC,GACFA,EAAWvI,QAAQF,GAAK7C,EAAGe,UAAUC,IAAI6B,IAEvC0I,GACFnJ,OAAOC,OAAOrC,EAAIuL,GAEpBH,EAAUS,YAAY7L,GAClBA,EAAG8L,wBACC9L,EAAG8L,mBAEJ9L,GAEH+L,EAAkB,CAACZ,EAAUa,KACjC,GAAIA,EAAS,CACX,GAAIb,EAEF,OAAOA,EAASc,kBADED,EAAQE,cACmBF,GAE/CA,EAAQ9K,SAEV,OAAOiL,QAAQC,Y,mIC5Bb,YAAsC,QAAY,Q,yBAAZ,iB,yBADxC,qBACE,oBACF,Q,qBADwB,uC,yBAGtB,YAAsC,QAAY,Q,yBAAZ,iB,yBADxC,sBACE,oBACF,Q,qBADwB,uC,yBAL1B,qBACE,2BAGA,4BAGF,Q,oBANa,qCAGsC,sCCI5C,Y,MAAMC,EAIX,eAEA,WACElN,KAAKmN,KAAOnN,KAAKmN,MAAQ,QAG3B,YACE,IAAKnN,KAAKoN,UAAYpN,KAAKqN,WAAarN,KAAKoN,QAAQE,OACnD,MAAO,GAET,MAAMA,EAASrK,OAAOsK,KAAKvN,KAAKoN,QAAQE,QAClCE,EAAK,GASX,OARIF,GACFA,EAAO1J,QAAS1D,IACd,MAAMuN,EAAMzN,KAAKqN,SAASnN,GACtBuN,GACFD,EAAGjJ,KAAKkJ,KAIPD,G,6CAxBEN,I,uBAAAA,EAAgB,sSDR7B,2B,KAAwB,qJ,0LCQjB,I,kCCRP,sCA2GMQ,EA3GW,CACf,QAAW,CACTC,IAAK,IACLC,QAAS,EACTC,GAAI,CAACF,EAAKG,EAAOC,KACf,MAAMC,EAAqBL,EAAMG,EAAQC,EAASJ,EAA3B,KACjBM,EAAQ,EAAIC,KAAKC,GAAKL,EAAQC,EACpC,MAAO,CACLK,EAAG,EACHC,MAAO,CACL,IAAU,EAAIH,KAAKI,IAAIL,GAAhB,KACP,KAAW,EAAIC,KAAKK,IAAIN,GAAhB,KACR,kBAAmBD,MAK3B,QAAW,CACTL,IAAK,IACLC,QAAS,EACTC,GAAI,CAACF,EAAKG,EAAOC,KACf,MAAMS,EAAOV,EAAQC,EACfC,EAAqBL,EAAMa,EAAQb,EAAlB,KACjBM,EAAQ,EAAIC,KAAKC,GAAKK,EAC5B,MAAO,CACLJ,EAAG,EACHC,MAAO,CACL,IAAU,EAAIH,KAAKI,IAAIL,GAAhB,KACP,KAAW,EAAIC,KAAKK,IAAIN,GAAhB,KACR,kBAAmBD,MAK3B,SAAY,CACVL,IAAK,KACLc,aAAa,EACbb,QAAS,EACTC,GAAI,KACK,CACLO,EAAG,GACHM,GAAI,GACJC,GAAI,GACJ5H,KAAM,OACN6H,QAAS,cACTC,UAAW,iBACXR,MAAO,MAIb,SAAY,CACVV,IAAK,IACLC,QAAS,EACTC,GAAI,KACK,CACLO,EAAG,GACHC,MAAO,MAIb,KAAQ,CACNV,IAAK,IACLC,QAAS,EACTC,GAAI,CAAC7G,EAAG8G,KAEC,CACLM,EAAG,EACHC,MAAO,CACL,KAAW,EAAK,EAAIP,EAAZ,KACR,mBALqB,IAAMA,EAAS,SAU5C,MAAS,CACPH,IAAK,IACLmB,MAAO,GACPjB,GAAI,CAACF,EAAKG,EAAOC,KAGR,CACLgB,GAAI,GACJC,GAAI,GACJX,MAAO,CACL,UANc,UAAU,GAAKP,GAASA,EAAQ,EAAI,KAAO,WAOzD,kBANuBH,EAAMG,EAAQC,EAASJ,EAA3B,SAW3B,cAAe,CACbA,IAAK,IACLmB,MAAO,GACPjB,GAAI,CAACF,EAAKG,EAAOC,KAGR,CACLgB,GAAI,GACJC,GAAI,GACJX,MAAO,CACL,UANc,UAAU,GAAKP,GAASA,EAAQ,EAAI,KAAO,WAOzD,kBANuBH,EAAMG,EAAQC,EAASJ,EAA3B,W,kCC9F7B,wEAWO,Y,MAAMsB,EACX,YAAiDC,EAAiC1P,GAAjC,KAAA0P,aAAiC,KAAA1P,YAElF,YAAYiE,EAA4B0L,EAAoBrP,GAC1D,IACE,OAAOE,KAAKkP,WAAWE,YAAY3L,EAAQ0L,EAAWrP,GACtD,MAAOI,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,cAAcmP,GACZ,IACE,OAAOrP,KAAKkP,WAAWI,cAAcD,GACrC,MAAOnP,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,WACE,IACE,OAAOF,KAAKkP,WAAWK,WACvB,MAAOrP,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,cAAc2F,GACZ,IACE,OAAO7F,KAAKkP,WAAWM,cAAc3J,GACrC,MAAO3F,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,aACE,IACE,OAAOF,KAAKkP,WAAWO,aACvB,MAAOvP,GACPF,KAAKR,UAAUW,iBAAiBD,K,6CAvCzB+O,GAAoB,KACX,KAAmB,Y,yBAD5BA,EAAoB,QAApBA,EAAoB,qBAFnB,S,GAEP,I,kCCZP,gGAYO,Y,MAAMS,G,8BAAAA,I,oDAAAA,IAA2B,SAJ7B,CAAC,IAAc,KAAa,IAAa,Q,GAI7C,I,kCCTP,oFAaO,Y,MAAMC,EACX,YAC2CC,EACjCpQ,EAC8BqQ,GAFG,KAAAD,iBACjC,KAAApQ,YAC8B,KAAAqQ,uBAGxC,iBAAiBpM,EAAwBqM,GACvC,MAAM/P,EAAK+P,GAAwB,GACnC,IACE,OAAO9P,KAAK4P,eAAeG,iBAAiBtM,EAAQ1D,GACpD,MAAOG,GACPF,KAAKR,UAAUW,iBAAiBD,IAGpC,eAAegK,GACb,IACE,OAAOlK,KAAK4P,eAAeI,eAAe9F,GAC1C,MAAOhK,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,mBAAmBJ,GACjB,IACE,GAAIA,GAASA,EAAMQ,OACjB,OAAON,KAAK4P,eAAeK,qBAAqBnQ,GAElD,MAAOI,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,wBAAwB8J,GACtB,IACE,OAAOhK,KAAK4P,eAAeM,0BAA0BlG,GACrD,MAAO9J,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,yBAAyBiQ,EAAkB/G,EAAagH,GACtD,IACE,OAAOpQ,KAAK4P,eAAeS,yBAAyBF,EAAU/G,EAAKgH,GACnE,MAAOlQ,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,iBAAiBoQ,GACf,IACE,OAAOtQ,KAAK4P,eAAeW,iBAAiBD,GAC5C,MAAOpQ,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,eAAeoQ,GACb,IACE,OAAOtQ,KAAK4P,eAAeY,eAAeF,GAC1C,MAAOpQ,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,YAAYoQ,GACV,IACE,OAAOtQ,KAAK4P,eAAea,YAAYH,GACvC,MAAOpQ,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,UAAUwQ,GACR,IACE,OAAO1Q,KAAK4P,eAAee,UAAUD,GACrC,MAAOxQ,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,UAAU0Q,GACR,IACE,OAAO5Q,KAAK4P,eAAeiB,UAAUD,GACrC,MAAO1Q,GACPF,KAAKR,UAAUW,iBAAiBD,IAIpC,iBACE,OAAOF,KAAK6P,qBAAqBiB,YAGnC,0BACE,OAAO9Q,KAAK6P,qBAAqBkB,cAGnC,iBACE,OAAO/Q,KAAK6P,qBAAqBS,S,6CAlGxBX,GAAwB,KAEzB,KAAuB,eAEvB,O,yBAJCA,EAAwB,QAAxBA,EAAwB,qBAFvB,S,GAEP,I,kCChBP,sKAAMqB,EAAe,CACnB,YACE,MAAMC,EAAMC,OACZ,OAAQD,EAAgB,cAAMA,EAAIE,WAAaF,EAAIE,UAAUC,kBAAkB,YAAcH,EAAIE,UAAUE,QAAQC,SAErH,YACE,QAAStR,KAAKuR,aAEhBC,UAAS,MACEN,OAAOO,aAElBC,YAAW,MACGR,OACCC,UAEf,OAAOQ,GACL,MAAMC,EAAS5R,KAAKuR,YACpB,IAAKK,EACH,OAEF,MAAMvD,EAAQrO,KAAK0R,cAAgBC,EAAQtD,MAAMjE,cAAgBuH,EAAQtD,MACzEuD,EAAOC,OAAO,CAAExD,WAElB,aAAasD,GACX,MAAMC,EAAS5R,KAAKuR,YACpB,IAAKK,EACH,OAEF,MAAMvD,EAAQrO,KAAK0R,cAAgBC,EAAQtD,MAAMjE,cAAgBuH,EAAQtD,MACzEuD,EAAOE,aAAa,CAAEzD,WAExB,YACErO,KAAK6R,OAAO,CAAExD,MAAO,WAEvB,iBACE,MAAMuD,EAAS5R,KAAKuR,YACfK,IAGD5R,KAAK0R,cACPE,EAAOG,iBAGPH,EAAOI,0BAGX,mBACE,MAAMJ,EAAS5R,KAAKuR,YACfK,IAGD5R,KAAK0R,cACPE,EAAOK,mBAGPL,EAAOM,4BAGX,eACE,MAAMN,EAAS5R,KAAKuR,YACfK,IAGD5R,KAAK0R,cACPE,EAAOO,eAGPP,EAAOQ,yBAQPC,EAAkB,KACtBrB,EAAasB,aAKTC,EAAuB,KAC3BvB,EAAae,kBAKTS,EAAyB,KAC7BxB,EAAaiB,oBAMTQ,EAAqB,KACzBzB,EAAamB,gBAMTO,EAAgBf,IACpBX,EAAaa,OAAOF,K,kCCtGtB,oI,sBCmBI,qBACE,sBACE,sBACF,OACF,Q,yBAII,YACE,mBAAU,QAAiB,OAC7B,Q,8BADY,oC,uCAJhB,qBAA8E,2EAC5E,oBACE,QACA,oBAGF,OACF,O,4BALI,2CACI,2C,uCAKR,qBAAgC,2DAC9B,sBACE,qBACE,YAAG,gCAAqB,OAC1B,OACF,OACF,QD1BG,Y,MAAMgB,EAaX,YAAoBhK,EAAoCiK,GAApC,KAAAjK,YAAoC,KAAAiK,aAP9C,KAAA7J,eAAiB,IAAI,IAIvB,KAAA8J,WAAa,IAAI,IACzB,KAAA7J,WAAY,EAIZ,WACOhJ,KAAK8S,aAGV9S,KAAK6S,WACF/N,eACAW,KACC,YAAWyE,GACFlK,KAAK8S,WAAW5I,GAAKzE,KAAK,YAAKvF,GAAMgL,QAAQC,IAAIjL,OAG3DoJ,UACE5D,IACC1F,KAAKgJ,WAAY,EACjBhJ,KAAK+S,UAAYrN,EACjB1F,KAAK6J,aAAenE,EAAIrC,IAAIrD,KAAKgT,cAElCpK,IACC5I,KAAKgJ,WAAY,EACjBhJ,KAAK4S,WAAW9I,SAASlB,KAG/B5I,KAAKiK,QAAQ,KAGf,mBAEA,QAAQgJ,GACN,GAAgB,MAAZA,GAAoBA,GAAY,GAAKA,EAAWjT,KAAK+S,UAAU/P,OAAQ,CACzE,MAAMkQ,EAASlT,KAAK+S,UAAUE,GAC9BjT,KAAK+I,eAAeuB,KAAK4I,GACzBlT,KAAK2I,UAAU4B,QAAQ2I,QAEvBlT,KAAK2I,UAAU4B,UAInB,SACMvK,KAAKmT,aAAenT,KAAKmT,YAAY7S,SACvCN,KAAKmT,YAAcnT,KAAKmT,YAAY7S,OACpCN,KAAKiK,QAAQjK,KAAKmT,cAItB,WACEnT,KAAKoT,WAAWpT,KAAKmT,aACrBnT,KAAKuK,UAGP,QAAQL,GACNlK,KAAKgJ,WAAY,EACjBhJ,KAAK6S,WAAWxK,KAAK6B,GAGvB,SACOlK,KAAKmT,aAA2C,KAA5BnT,KAAKmT,YAAY7S,QACxCN,KAAKuK,W,6CAvEEoI,GAAqB,uB,uBAArBA,EAAqB,4qBCZlC,qBACE,sBACE,0BAKE,0DAAyB,8BAEZ,EAAA9S,UAFb,CAAyB,8BAGZ,EAAA0K,WAHb,CAAyB,4BAId,EAAA8I,WAGb,OACF,OACF,OACA,sBACE,mBACE,2BAKA,2BAQA,2BAOF,OACF,Q,MAjCM,sCAAyB,2CAYhB,iCAKsC,uCAQK,qC,8FDpBnD,I,kCEZP,gCAAO,MAAMC,EAIX,YAAYC,EAAiB,IAC3BtQ,OAAOC,OAAOlD,KAAMuT","file":"common.b41c40a99088fa28dabb.js","sourcesContent":["import { Injectable, Inject } from '@angular/core';\r\nimport { TASK_SERVICE_KEY } from 'src/app/service-providers/dynamic-key.provider';\r\nimport { ErrorService } from '../error/error.service';\r\nimport { ITaskApi } from 'src/app/interfaces/task-api.interface';\r\nimport { Task } from 'src/app/models/common/task.model';\r\nimport { Observable } from 'rxjs';\r\nimport { TaskFilterModel } from 'src/app/models/common/filter.model';\r\nimport { SelectOption } from 'src/app/models/common/select-option.model';\r\nimport { TASK_META_KEY } from 'src/app/service-providers/task-meta.provider';\r\nimport { TaskMeta } from 'src/app/models/common/task-meta.model';\r\nimport { Moment } from 'moment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CommonTaskService {\r\n  constructor(@Inject(TASK_SERVICE_KEY) private taskAPI: ITaskApi, private errorSrvc: ErrorService, @Inject(TASK_META_KEY) private taskMetaParam: TaskMeta) {}\r\n\r\n  getTasksOffset(startD: Moment, endD: Moment, taskFilter: TaskFilterModel, search: string, oppId: string): Observable<Task[]> {\r\n    const id = oppId ? oppId : '';\r\n    try {\r\n      return this.taskAPI.getTasksOffset(startD, endD, taskFilter, search, id);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getTasks(startD: Moment, endD: Moment, search: string, oppId: string): Observable<Task[]> {\r\n    const id = oppId ? oppId : '';\r\n    try {\r\n      return this.taskAPI.getTasks(startD, endD, search, id);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getTaskById(taskId: string): Observable<Task> {\r\n    try {\r\n      if (taskId && taskId.trim()) {\r\n        return this.taskAPI.getTaskById(taskId);\r\n      }\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  upsertTask(task: Task): Observable<Task> {\r\n    try {\r\n      return this.taskAPI.upsertTask(task);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getStatus(): SelectOption[] {\r\n    return this.taskMetaParam.status;\r\n  }\r\n\r\n  getAlertTypes(): SelectOption[] {\r\n    return this.taskMetaParam.alert;\r\n  }\r\n}\r\n","import { c as writeTask } from './index-e806d1f6.js';\nimport { createGesture } from './index-f49d994d.js';\nimport { h as hapticSelectionEnd, a as hapticSelectionStart, b as hapticSelectionChanged } from './haptic-27b3f981.js';\n\nconst createButtonActiveGesture = (el, isButton) => {\n  let currentTouchedButton;\n  let initialTouchedButton;\n  const activateButtonAtPoint = (x, y, hapticFeedbackFn) => {\n    if (typeof document === 'undefined') {\n      return;\n    }\n    const target = document.elementFromPoint(x, y);\n    if (!target || !isButton(target)) {\n      clearActiveButton();\n      return;\n    }\n    if (target !== currentTouchedButton) {\n      clearActiveButton();\n      setActiveButton(target, hapticFeedbackFn);\n    }\n  };\n  const setActiveButton = (button, hapticFeedbackFn) => {\n    currentTouchedButton = button;\n    if (!initialTouchedButton) {\n      initialTouchedButton = currentTouchedButton;\n    }\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.add('ion-activated'));\n    hapticFeedbackFn();\n  };\n  const clearActiveButton = (dispatchClick = false) => {\n    if (!currentTouchedButton) {\n      return;\n    }\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.remove('ion-activated'));\n    /**\n     * Clicking on one button, but releasing on another button\n     * does not dispatch a click event in browsers, so we\n     * need to do it manually here. Some browsers will\n     * dispatch a click if clicking on one button, dragging over\n     * another button, and releasing on the original button. In that\n     * case, we need to make sure we do not cause a double click there.\n     */\n    if (dispatchClick && initialTouchedButton !== currentTouchedButton) {\n      currentTouchedButton.click();\n    }\n    currentTouchedButton = undefined;\n  };\n  return createGesture({\n    el,\n    gestureName: 'buttonActiveDrag',\n    threshold: 0,\n    onStart: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart),\n    onMove: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged),\n    onEnd: () => {\n      clearActiveButton(true);\n      hapticSelectionEnd();\n      initialTouchedButton = undefined;\n    }\n  });\n};\n\nexport { createButtonActiveGesture as c };\n","const hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n  return (typeof color === 'string' && color.length > 0) ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter(c => c != null)\n      .map(c => c.trim())\n      .filter(c => c !== '');\n  }\n  return [];\n};\nconst getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach(c => map[c] = true);\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { ItemErrComponent } from './item-err.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, IonicModule, ReactiveFormsModule],\r\n  declarations: [ItemErrComponent],\r\n  exports: [ItemErrComponent],\r\n})\r\nexport class ItemErrComponentModule {}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { Contacts } from '@ionic-native/contacts/ngx';\r\nimport { BehaviorSubject, from, Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { IContactsApi } from 'src/app/interfaces/contact-api.interface';\r\nimport { ContactMeta } from 'src/app/models/common/contact-meta.model';\r\nimport { CategorizedContact, ContactModel } from 'src/app/models/common/contact.model';\r\nimport { SelectOption } from 'src/app/models/common/select-option.model';\r\nimport { VehicleOwnership } from 'src/app/models/common/vehicle-ownership.model';\r\nimport { CONTACT_META_KEY } from 'src/app/service-providers/contact-meta.provider';\r\nimport { CONTACT_SERVICE_KEY } from 'src/app/service-providers/dynamic-key.provider';\r\nimport { ErrorService } from '../error/error.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CommonContactService {\r\n  constructor(\r\n    @Inject(CONTACT_SERVICE_KEY) private contactAPI: IContactsApi<ContactModel>,\r\n    private errorSrvc: ErrorService,\r\n    @Inject(CONTACT_META_KEY) private contactMetaParam: ContactMeta,\r\n    private contacts: Contacts\r\n  ) {}\r\n\r\n  private recentContacts: BehaviorSubject<ContactModel[]> = new BehaviorSubject([]);\r\n\r\n  public subRecentContacts(): Observable<ContactModel[]> {\r\n    return this.recentContacts.asObservable();\r\n  }\r\n\r\n  getCities(): SelectOption[] {\r\n    return this.contactMetaParam.cities;\r\n  }\r\n\r\n  getStates(): SelectOption[] {\r\n    return this.contactMetaParam.states;\r\n  }\r\n\r\n  getDefaultCountryCode(): string {\r\n    return this.contactMetaParam.defaultCountryCode;\r\n  }\r\n\r\n  getContactSalutation(): SelectOption[] {\r\n    return this.contactMetaParam.salutation;\r\n  }\r\n\r\n  getContactDocType(): SelectOption[] {\r\n    return this.contactMetaParam.docType;\r\n  }\r\n\r\n  getCountryCodeList(): SelectOption[] {\r\n    return this.contactMetaParam.countryCode;\r\n  }\r\n\r\n  getCountryList(): SelectOption[] {\r\n    return this.contactMetaParam.countryList;\r\n  }\r\n\r\n  getGender(): SelectOption[] {\r\n    return this.contactMetaParam.genderList;\r\n  }\r\n\r\n  getRace(): SelectOption[] {\r\n    return this.contactMetaParam.raceList;\r\n  }\r\n\r\n  getRecentContacts(): Observable<ContactModel[]> {\r\n    try {\r\n      return this.contactAPI.getRecentContacts().pipe(\r\n        tap((res) => {\r\n          this.updateRecentContactList(res);\r\n        })\r\n      );\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  searchByPhoneAndName(mobile: string, name: string): Observable<ContactModel[]> {\r\n    try {\r\n      if ((mobile && mobile.trim()) || (name && name.trim())) {\r\n        return this.contactAPI.getContactByPhoneAndName(mobile, name);\r\n      }\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  searchByDocNum(searchKey: string): Observable<ContactModel[]> {\r\n    try {\r\n      if (searchKey && searchKey.trim()) {\r\n        return this.contactAPI.getContactsByDoc(searchKey);\r\n      }\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  searchByPhoneNumber(searchKey: string): Observable<ContactModel[]> {\r\n    try {\r\n      if (searchKey && searchKey.trim()) {\r\n        return this.contactAPI.getContactByMobile(searchKey);\r\n      }\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  searchByEmail(searchKey: string): Observable<ContactModel[]> {\r\n    try {\r\n      if (searchKey && searchKey.trim()) {\r\n        return this.contactAPI.getContactByEmail(searchKey);\r\n      }\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  searchByName(searchKey: string): Observable<ContactModel[]> {\r\n    try {\r\n      return this.contactAPI.getContactByName(searchKey);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getContactById(searchKey: string): Observable<ContactModel> {\r\n    try {\r\n      if (searchKey && searchKey.trim()) {\r\n        return this.contactAPI.getContactById(searchKey).pipe(\r\n          tap((res) => {\r\n            this.updateRecentContactList([res]);\r\n          })\r\n        );\r\n      }\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  importContact(): Observable<ContactModel> {\r\n    try {\r\n      return from(this.contacts.pickContact()).pipe(\r\n        map((e) => {\r\n          const con = new ContactModel();\r\n          con.Name = e.name.formatted;\r\n          if (e.phoneNumbers !== null) {\r\n            con.MobileNo = e.phoneNumbers[0].value.trim();\r\n          } else {\r\n            con.MobileNo = null;\r\n          }\r\n          return con;\r\n        })\r\n      );\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  upsertContact(contact: ContactModel): Observable<ContactModel> {\r\n    try {\r\n      return this.contactAPI.setContact(contact);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getContactVehicleById(id: string): Observable<VehicleOwnership[]> {\r\n    try {\r\n      return this.contactAPI.getContactVehicleById(id);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getLetterScroll(): string[] {\r\n    return new Array(26).fill(1).map((_, i) => String.fromCharCode(65 + i));\r\n  }\r\n\r\n  searchContactByKeyword(searchKey?: string): Observable<ContactModel[]> {\r\n    try {\r\n      return this.contactAPI.searchByKeyword(searchKey);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getCategorizedContact(searchKey?: string): Observable<CategorizedContact[]> {\r\n    return this.searchByName(searchKey).pipe(\r\n      map((e) => {\r\n        const tempContacts = new Array<CategorizedContact>();\r\n        e.forEach((el) => {\r\n          if (tempContacts.length < 1) {\r\n            tempContacts.push({\r\n              header: el.Name.charAt(0).toLocaleUpperCase(),\r\n              contacts: [],\r\n            });\r\n            tempContacts[tempContacts.length - 1].contacts.push(el);\r\n          } else {\r\n            if (tempContacts[tempContacts.length - 1].header === el.Name.charAt(0).toLocaleUpperCase()) {\r\n              tempContacts[tempContacts.length - 1].contacts.push(el);\r\n            } else {\r\n              tempContacts.push({\r\n                header: el.Name.charAt(0).toLocaleUpperCase(),\r\n                contacts: [],\r\n              });\r\n              tempContacts[tempContacts.length - 1].contacts.push(el);\r\n            }\r\n          }\r\n        });\r\n        tempContacts.sort((a, b) => a.header.localeCompare(b.header));\r\n        return tempContacts;\r\n      })\r\n    );\r\n  }\r\n\r\n  private updateRecentContactList(contactList: ContactModel[]): void {\r\n    const curRecentList = this.recentContacts.value;\r\n    const newList = [...contactList];\r\n    const curIds = new Set();\r\n    for (const contact of contactList) {\r\n      curIds.add(contact.Id);\r\n    }\r\n    for (const contact of curRecentList) {\r\n      if (!curIds.has(contact.Id)) {\r\n        newList.push(contact);\r\n      }\r\n    }\r\n    this.recentContacts.next(newList);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { SelectorComponent } from './selector.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, IonicModule, TranslateModule],\r\n  declarations: [SelectorComponent],\r\n  exports: [SelectorComponent],\r\n})\r\nexport class SelectorComponentModule {}\r\n","export class CheckboxModel {\r\n  isChecked: boolean;\r\n  label: string;\r\n  value: string;\r\n\r\n  constructor(label: string, value?: string) {\r\n    this.label = label;\r\n    this.value = value;\r\n    this.isChecked = false;\r\n  }\r\n}\r\n","<ion-header>\r\n  <ion-toolbar>\r\n    <ion-searchbar class=\"ion-margin-top\" showCancelButton=\"always\" debounce=\"500\" (ionChange)=\"search($event)\" (ionCancel)=\"dismiss()\"></ion-searchbar>\r\n  </ion-toolbar>\r\n</ion-header>\r\n<ion-content>\r\n  <ion-list>\r\n    <ion-item *ngIf=\"isLoading\" lines=\"none\">\r\n      <ion-label class=\"ion-text-center\">\r\n        <ion-spinner></ion-spinner>\r\n      </ion-label>\r\n    </ion-item>\r\n    <ion-item-divider>Currently Selected</ion-item-divider>\r\n    <ng-container *ngFor=\"let item of modelList\">\r\n      <ion-item *ngIf=\"item?.isChecked\">\r\n        <ion-label>{{ item?.label }}</ion-label>\r\n        <ion-checkbox color=\"primary\" [(ngModel)]=\"item.isChecked\" (click)=\"checkSingle(item.label)\" slot=\"start\"></ion-checkbox>\r\n      </ion-item>\r\n    </ng-container>\r\n    <ion-item-divider>Search Results</ion-item-divider>\r\n    <ion-item *ngFor=\"let item of searchResult\">\r\n      <ion-label>{{ item?.label }}</ion-label>\r\n      <ion-checkbox color=\"primary\" [(ngModel)]=\"item.isChecked\" (click)=\"checkSingle(item.label)\" slot=\"start\"></ion-checkbox>\r\n    </ion-item>\r\n  </ion-list>\r\n</ion-content>\r\n<ion-footer className=\"ion-no-border\">\r\n  <ion-toolbar>\r\n    <ion-button expand=\"block\" (click)=\"save()\">Confirm</ion-button>\r\n  </ion-toolbar>\r\n</ion-footer>\r\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { IonSearchbar, ModalController } from '@ionic/angular';\r\nimport { VehicleModel } from 'src/app/models/common/vehicle-model.model';\r\nimport { TestdriveServiceSG } from 'src/app/services/sg/testdrive/testdrive.service';\r\nimport { CheckboxModel } from '../../../models/common/model-interest-selector.model';\r\nimport { ErrorService } from '../../../services/common/error/error.service';\r\nimport { OpportunityServiceSG } from '../../../services/sg/opportunity/opportunity-sg.service';\r\n\r\n@Component({\r\n  selector: 'model-interest-selector',\r\n  templateUrl: './model-interest-selector.component.html',\r\n  styleUrls: ['./model-interest-selector.component.scss'],\r\n})\r\nexport class ModelInterestSelectorComponent implements OnInit {\r\n  @ViewChild(IonSearchbar) searchbar: IonSearchbar;\r\n  @Input() cmp: string;\r\n  @Input() team: string;\r\n  @Input() selectedValues: Array<string>;\r\n  @Input() singleSelect: boolean;\r\n  @Output() selectedResult = new EventEmitter<any>();\r\n\r\n  public searchInput: string;\r\n  public searchResult: Array<CheckboxModel>;\r\n  public modelSelected: Array<CheckboxModel>;\r\n  public modelList: Array<CheckboxModel>;\r\n  public isLoading = true;\r\n  private vehModel: Array<VehicleModel>;\r\n  constructor(private modalCtrl: ModalController, private err: ErrorService, private oppService: OpportunityServiceSG, private tdService: TestdriveServiceSG) {}\r\n\r\n  ngOnInit() {\r\n    if (!this.modelList || this.modelList.length <= 0) {\r\n      (this.singleSelect ? this.tdService.retrieveTDModels(new Set([this.cmp])) : this.oppService.retrieveVehModelInt(new Set([this.cmp]))).subscribe(\r\n        (res) => {\r\n          this.vehModel = res;\r\n          this.modelList = new Array<CheckboxModel>();\r\n          if (this.vehModel) {\r\n            const filteredRes: string[] = [];\r\n            for (const model of this.vehModel) {\r\n              if (filteredRes.indexOf(model.ShortDescription) < 0) {\r\n                filteredRes.push(model.ShortDescription);\r\n                this.modelList.push(new CheckboxModel(model.ShortDescription, model.Id));\r\n              }\r\n            }\r\n          }\r\n          this.preselectValues();\r\n          if (!this.searchResult) {\r\n            this.searchResult = this.modelList;\r\n          }\r\n          this.isLoading = false;\r\n        },\r\n        (err) => {\r\n          this.err.logError(err);\r\n          this.isLoading = false;\r\n        }\r\n      );\r\n    } else {\r\n      this.isLoading = false;\r\n      this.preselectValues();\r\n      if (!this.searchResult) {\r\n        this.searchResult = this.modelList;\r\n      }\r\n    }\r\n  }\r\n\r\n  checkSingle(label: string) {\r\n    if (this.singleSelect) {\r\n      this.modelList.forEach((model) => {\r\n        if (model.isChecked && label !== model.label) {\r\n          model.isChecked = false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  search(evt: Event) {\r\n    if (!evt || !evt.target) {\r\n      return;\r\n    }\r\n    const target = evt.target as HTMLInputElement;\r\n    let keyword = target.value;\r\n    this.isLoading = true;\r\n    if (keyword && keyword.trim()) {\r\n      keyword = keyword.trim();\r\n      this.getData(keyword);\r\n    } else {\r\n      this.searchResult = this.modelList;\r\n    }\r\n    this.isLoading = false;\r\n  }\r\n\r\n  getData(key?: string) {\r\n    if (!this.modelList) {\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.searchResult = this.modelList.filter((val) => {\r\n      if (val.label.toUpperCase().indexOf(key.toUpperCase()) >= 0) {\r\n        return val;\r\n      }\r\n    });\r\n  }\r\n\r\n  dismiss(selectedModels?: Array<CheckboxModel>) {\r\n    if (selectedModels) {\r\n      this.selectedResult.emit(selectedModels);\r\n      this.modalCtrl.dismiss(selectedModels);\r\n    } else {\r\n      this.modalCtrl.dismiss();\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.modelSelected = this.modelList.filter((val) => {\r\n      return val.isChecked;\r\n    });\r\n    this.dismiss(this.modelSelected);\r\n  }\r\n\r\n  private preselectValues() {\r\n    if (this.selectedValues) {\r\n      this.selectedValues.forEach((selectedModel) => {\r\n        this.modelList.forEach((model) => {\r\n          if (selectedModel.toUpperCase() === model.label.toUpperCase()) {\r\n            model.isChecked = true;\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { NavController } from '@ionic/angular';\r\nimport { ContactModel } from 'src/app/models/common/contact.model';\r\nimport { ViewContactPageRoutingKeys } from 'src/app/pages/contact/view-contact/view-contact-routing.keys';\r\nimport { TradeinUpdateProfilePageRoutingKeys } from 'src/app/pages/tradein/edit-tradein/update-profile/update-profile-routing.keys';\r\nimport { CommonContactService } from 'src/app/services/common/contact/contact.service';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-search-result',\r\n  templateUrl: './search-result.component.html',\r\n  styleUrls: ['./search-result.component.scss'],\r\n})\r\nexport class SearchResultComponent implements OnInit, OnChanges {\r\n  @Input() searchParam: ContactModel;\r\n  @Input() isKeyword: boolean;\r\n  @Input() oppId: string;\r\n  contactList: ContactModel[];\r\n  isLoading = false;\r\n  countryCode = environment.countryCode;\r\n\r\n  constructor(private contactService: CommonContactService, private navCtrl: NavController) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.searchParam) {\r\n      this.searchContact();\r\n    } else {\r\n      this.getRecentContacts();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getRecentContacts();\r\n    console.log('bengdebug');\r\n    console.log(this.oppId);\r\n  }\r\n\r\n  searchContact() {\r\n    this.contactList = [];\r\n    this.isLoading = true;\r\n    if (this.isKeyword) {\r\n      this.contactService.searchContactByKeyword(this.searchParam.Name).subscribe(\r\n        (e) => {\r\n          this.contactList = e;\r\n          this.isLoading = false;\r\n        },\r\n        (err) => {\r\n          this.isLoading = false;\r\n        }\r\n      );\r\n    } else {\r\n      this.contactService.searchByPhoneAndName(this.searchParam.MobileNo, this.searchParam.Name).subscribe(\r\n        (e) => {\r\n          this.contactList = e;\r\n          this.isLoading = false;\r\n        },\r\n        (err) => {\r\n          this.isLoading = false;\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  getRecentContacts() {\r\n    this.contactList = [];\r\n    this.isLoading = true;\r\n    this.contactService.getRecentContacts().subscribe(\r\n      (e) => {\r\n        this.contactList = e;\r\n        this.isLoading = false;\r\n      },\r\n      (err) => {\r\n        this.isLoading = false;\r\n      }\r\n    );\r\n  }\r\n\r\n  viewContact(item: ContactModel) {\r\n    if (this.oppId === 'oppId') {\r\n      this.navCtrl.navigateForward(ViewContactPageRoutingKeys.BASE + '/' + item.Id);\r\n    } else {\r\n      this.navCtrl.navigateForward([`${TradeinUpdateProfilePageRoutingKeys.BASE}/${this.oppId}/${item.Id}`]);\r\n    }\r\n  }\r\n\r\n  getFavIcon(item: ContactModel) {\r\n    if (item.Flag) {\r\n      return 'heart';\r\n    } else {\r\n      return 'heart-outline';\r\n    }\r\n  }\r\n}\r\n","<ion-grid class=\"ion-padding\">\r\n  <ion-row class=\"ion-no-padding ion-no-margin\">\r\n    <ion-col>\r\n      <ion-label *ngIf=\"!searchParam\">\r\n        <b>{{ 'ContactSearch_QuickAccess' | translate }}</b>\r\n      </ion-label>\r\n      <ion-label *ngIf=\"searchParam\">\r\n        <b>{{ 'ContactSearch_SearchResults' | translate }}</b>\r\n      </ion-label>\r\n    </ion-col>\r\n    <ion-col class=\"ion-text-end\" *ngIf=\"contactList?.length < 0\">\r\n      <ion-label color=\"primary\">\r\n        <b>\r\n          <a>{{ 'ContactSearch_Clear' | translate }}</a>\r\n        </b>\r\n      </ion-label>\r\n    </ion-col>\r\n  </ion-row>\r\n  <ion-row *ngIf=\"isLoading\" class=\"ion-no-padding ion-no-margin ion-margin-top\">\r\n    <ion-col>\r\n      <ion-item lines=\"none\">\r\n        <ion-label class=\"ion-text-center\">\r\n          <ion-spinner></ion-spinner>\r\n        </ion-label>\r\n      </ion-item>\r\n    </ion-col>\r\n  </ion-row>\r\n  <ion-row>\r\n    <ion-col>\r\n      <ion-list>\r\n        <ion-item *ngFor=\"let item of contactList\" button lines=\"full\" detail (click)=\"viewContact(item)\">\r\n          <!-- <ion-icon class=\"big-icon\" name=\"{{ getFavIcon(item) }}\" color=\"primary\" slot=\"start\"></ion-icon> -->\r\n          <ion-text slot=\"start\">\r\n            <ion-label color=\"primary\" class=\"big-font\">\r\n              {{ item?.Name }}\r\n            </ion-label>\r\n            <ion-label class=\"small-font\" *ngIf=\"item?.MobileNo\">\r\n              {{ item?.MobileNo }}\r\n            </ion-label>\r\n          </ion-text>\r\n        </ion-item>\r\n      </ion-list>\r\n    </ion-col>\r\n  </ion-row>\r\n</ion-grid>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { AutocompleteComponent } from './autocomplete.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, IonicModule, FormsModule],\r\n  declarations: [AutocompleteComponent],\r\n  exports: [AutocompleteComponent],\r\n})\r\nexport class AutocompleteComponentModule {}\r\n","export const EditOfferPageRoutingKeys = {\r\n  BASE: 'edit-offer',\r\n  PARAM_ID: 'new',\r\n  STATE_OPPID: 'new',\r\n};\r\n","const attachComponent = async (delegate, container, component, cssClasses, componentProps) => {\n  if (delegate) {\n    return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n  }\n  if (typeof component !== 'string' && !(component instanceof HTMLElement)) {\n    throw new Error('framework delegate is missing');\n  }\n  const el = (typeof component === 'string')\n    ? container.ownerDocument && container.ownerDocument.createElement(component)\n    : component;\n  if (cssClasses) {\n    cssClasses.forEach(c => el.classList.add(c));\n  }\n  if (componentProps) {\n    Object.assign(el, componentProps);\n  }\n  container.appendChild(el);\n  if (el.componentOnReady) {\n    await el.componentOnReady();\n  }\n  return el;\n};\nconst detachComponent = (delegate, element) => {\n  if (element) {\n    if (delegate) {\n      const container = element.parentElement;\n      return delegate.removeViewFromDom(container, element);\n    }\n    element.remove();\n  }\n  return Promise.resolve();\n};\n\nexport { attachComponent as a, detachComponent as d };\n","<ion-item lines=\"none\" *ngIf=\"!control?.valid && (control?.touched || control?.dirty) && getErrors()\">\r\n  <ion-note *ngIf=\"size == 'small'\" color=\"danger\" class=\"ion-text-wrap\">\r\n    <p *ngFor=\"let errMsg of getErrors()\">{{ errMsg }}</p>\r\n  </ion-note>\r\n  <ion-label color=\"danger\" class=\"ion-text-wrap\" *ngIf=\"size == 'large'\">\r\n    <p *ngFor=\"let errMsg of getErrors()\">{{ errMsg }}</p>\r\n  </ion-label>\r\n</ion-item>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-item-err',\r\n  templateUrl: './item-err.component.html',\r\n  styleUrls: ['./item-err.component.scss'],\r\n})\r\nexport class ItemErrComponent implements OnInit {\r\n  @Input() size: 'small' | 'large';\r\n  @Input() control: AbstractControl;\r\n  @Input() messages: { [key: string]: string };\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.size = this.size || 'small';\r\n  }\r\n\r\n  getErrors(): string[] {\r\n    if (!this.control || !this.messages || !this.control.errors) {\r\n      return [];\r\n    }\r\n    const errors = Object.keys(this.control.errors);\r\n    const rv = [];\r\n    if (errors) {\r\n      errors.forEach((e) => {\r\n        const msg = this.messages[e];\r\n        if (msg) {\r\n          rv.push(msg);\r\n        }\r\n      });\r\n    }\r\n    return rv;\r\n  }\r\n}\r\n","const spinners = {\n  'bubbles': {\n    dur: 1000,\n    circles: 9,\n    fn: (dur, index, total) => {\n      const animationDelay = `${(dur * index / total) - dur}ms`;\n      const angle = 2 * Math.PI * index / total;\n      return {\n        r: 5,\n        style: {\n          'top': `${9 * Math.sin(angle)}px`,\n          'left': `${9 * Math.cos(angle)}px`,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'circles': {\n    dur: 1000,\n    circles: 8,\n    fn: (dur, index, total) => {\n      const step = index / total;\n      const animationDelay = `${(dur * step) - dur}ms`;\n      const angle = 2 * Math.PI * step;\n      return {\n        r: 5,\n        style: {\n          'top': `${9 * Math.sin(angle)}px`,\n          'left': `${9 * Math.cos(angle)}px`,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'circular': {\n    dur: 1400,\n    elmDuration: true,\n    circles: 1,\n    fn: () => {\n      return {\n        r: 20,\n        cx: 48,\n        cy: 48,\n        fill: 'none',\n        viewBox: '24 24 48 48',\n        transform: 'translate(0,0)',\n        style: {}\n      };\n    }\n  },\n  'crescent': {\n    dur: 750,\n    circles: 1,\n    fn: () => {\n      return {\n        r: 26,\n        style: {}\n      };\n    }\n  },\n  'dots': {\n    dur: 750,\n    circles: 3,\n    fn: (_, index) => {\n      const animationDelay = -(110 * index) + 'ms';\n      return {\n        r: 6,\n        style: {\n          'left': `${9 - (9 * index)}px`,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'lines': {\n    dur: 1000,\n    lines: 12,\n    fn: (dur, index, total) => {\n      const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n      const animationDelay = `${(dur * index / total) - dur}ms`;\n      return {\n        y1: 17,\n        y2: 29,\n        style: {\n          'transform': transform,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'lines-small': {\n    dur: 1000,\n    lines: 12,\n    fn: (dur, index, total) => {\n      const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n      const animationDelay = `${(dur * index / total) - dur}ms`;\n      return {\n        y1: 12,\n        y2: 20,\n        style: {\n          'transform': transform,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  }\n};\nconst SPINNERS = spinners;\n\nexport { SPINNERS as S };\n","import { Injectable, Inject } from '@angular/core';\r\nimport { TRADEIN_SERVICE_KEY } from 'src/app/service-providers/dynamic-key.provider';\r\nimport { ITradeinApi } from 'src/app/interfaces/tradein-api.interface';\r\nimport { ErrorService } from '../error/error.service';\r\nimport { TradeInFilterModel } from 'src/app/models/common/filter.model';\r\nimport { Observable } from 'rxjs';\r\nimport { Purchaser, TradeIn } from 'src/app/models/common/tradein.model';\r\nimport { SelectOption } from 'src/app/models/common/select-option.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CommonTradeinService {\r\n  constructor(@Inject(TRADEIN_SERVICE_KEY) private tradeinAPI: ITradeinApi, private errorSrvc: ErrorService) {}\r\n\r\n  getTradeIns(filter: TradeInFilterModel, tradeInId?: string, oppId?: string): Observable<TradeIn[]> {\r\n    try {\r\n      return this.tradeinAPI.getTradeIns(filter, tradeInId, oppId);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  upsertTradeIn(tradeIn: TradeIn): Observable<TradeIn[]> {\r\n    try {\r\n      return this.tradeinAPI.upsertTradeIn(tradeIn);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getMakes(): Observable<SelectOption[]> {\r\n    try {\r\n      return this.tradeinAPI.getMakes();\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getPurchasers(name?: string): Observable<Purchaser[]> {\r\n    try {\r\n      return this.tradeinAPI.getPurchasers(name);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getSources(): Observable<SelectOption[]> {\r\n    try {\r\n      return this.tradeinAPI.getSources();\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SearchResultComponent } from './search-result.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, IonicModule, FormsModule, TranslateModule],\r\n  declarations: [SearchResultComponent],\r\n  exports: [SearchResultComponent],\r\n})\r\nexport class SearchResultComponentModule {}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { ErrorService } from '../error/error.service';\r\nimport { IOpportunityApi } from 'src/app/interfaces/opportunity-api.interface';\r\nimport { OPPORTUNITY_SERVICE_KEY } from 'src/app/service-providers/dynamic-key.provider';\r\nimport { Observable } from 'rxjs';\r\nimport { Opportunity } from 'src/app/models/common/opportunity.model';\r\nimport { Campaign } from 'src/app/models/common/campaign.model';\r\nimport { SelectOption } from 'src/app/models/common/select-option.model';\r\nimport { OPPORTUNITY_META_KEY } from 'src/app/service-providers/opportunity-meta.provider';\r\nimport { OpportunityMeta } from 'src/app/models/common/opportunity-meta.model';\r\nimport { OppFilterModel } from 'src/app/models/common/filter.model';\r\nimport { InfiniteScrollModel } from 'src/app/models/common/infinite-scroll.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CommonOpportunityService {\r\n  constructor(\r\n    @Inject(OPPORTUNITY_SERVICE_KEY) private opportunityAPI: IOpportunityApi<Opportunity>,\r\n    private errorSrvc: ErrorService,\r\n    @Inject(OPPORTUNITY_META_KEY) private opportunityMetaParam: OpportunityMeta\r\n  ) {}\r\n\r\n  getOpportunities(filter: OppFilterModel, contactId?: string): Observable<Opportunity[]> {\r\n    const id = contactId ? contactId : '';\r\n    try {\r\n      return this.opportunityAPI.getOpportunities(filter, id);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n  getOppInfinite(key?: string): Observable<InfiniteScrollModel<Opportunity[]>> {\r\n    try {\r\n      return this.opportunityAPI.getOppInfinite(key);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getOpportunityById(oppId: string): Observable<Opportunity> {\r\n    try {\r\n      if (oppId && oppId.trim()) {\r\n        return this.opportunityAPI.getOpportunitiesById(oppId);\r\n      }\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getOpportunityByKeyword(keyword: string): Observable<Opportunity[]> {\r\n    try {\r\n      return this.opportunityAPI.getOpportunitiesByKeyword(keyword);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  checkExistingOpportunity(personId: string, cmp: string, sc: string): Observable<Opportunity[]> {\r\n    try {\r\n      return this.opportunityAPI.checkExistingOpportunity(personId, cmp, sc);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getModelInterest(company: string): Observable<SelectOption[]> {\r\n    try {\r\n      return this.opportunityAPI.getModelInterest(company);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getPPDateRange(company: string): Observable<SelectOption[]> {\r\n    try {\r\n      return this.opportunityAPI.getPPDateRange(company);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getCmpgList(company: string): Observable<Campaign[]> {\r\n    try {\r\n      return this.opportunityAPI.getCmpgList(company);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getSource(companyName: string): Observable<SelectOption[]> {\r\n    try {\r\n      return this.opportunityAPI.getSource(companyName);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  upsertOpp(opportunity: Opportunity): Observable<Opportunity> {\r\n    try {\r\n      return this.opportunityAPI.upsertOpp(opportunity);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getVehicleType(): SelectOption[] {\r\n    return this.opportunityMetaParam.vehicleType;\r\n  }\r\n\r\n  getStarredFilterOptions() {\r\n    return this.opportunityMetaParam.starredFilter;\r\n  }\r\n\r\n  getCompanyList() {\r\n    return this.opportunityMetaParam.company;\r\n  }\r\n}\r\n","const HapticEngine = {\n  getEngine() {\n    const win = window;\n    return (win.TapticEngine) || (win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics);\n  },\n  available() {\n    return !!this.getEngine();\n  },\n  isCordova() {\n    return !!window.TapticEngine;\n  },\n  isCapacitor() {\n    const win = window;\n    return !!win.Capacitor;\n  },\n  impact(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({ style });\n  },\n  notification(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({ style });\n  },\n  selection() {\n    this.impact({ style: 'light' });\n  },\n  selectionStart() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    }\n    else {\n      engine.gestureSelectionStart();\n    }\n  },\n  selectionChanged() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    }\n    else {\n      engine.gestureSelectionChanged();\n    }\n  },\n  selectionEnd() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    }\n    else {\n      engine.gestureSelectionEnd();\n    }\n  }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n  HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n  HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n  HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n  HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nconst hapticImpact = (options) => {\n  HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };\n","import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { IonSearchbar, ModalController } from '@ionic/angular';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { switchMap, tap } from 'rxjs/operators';\r\nimport { AutoCompleteModel } from 'src/app/models/common/auto-complete.model';\r\nimport { ErrorService } from 'src/app/services/common/error/error.service';\r\n\r\n@Component({\r\n  selector: 'app-autocomplete',\r\n  templateUrl: './autocomplete.component.html',\r\n  styleUrls: ['./autocomplete.component.scss'],\r\n})\r\nexport class AutocompleteComponent implements OnInit, AfterViewInit {\r\n  @Input() callbackFn: (param?: string) => Observable<any[]>;\r\n  @Input() transformFn: (val: any) => AutoCompleteModel;\r\n  @Input() noResultFn: (searchStr: string) => void;\r\n  @Input() searchType: string;\r\n  @Input() searchInput: string;\r\n  @Output() selectedResult = new EventEmitter<any>();\r\n  public searchResult: Array<AutoCompleteModel>;\r\n  public rawResult: Array<any>;\r\n\r\n  private searchSubj = new Subject<string>();\r\n  isLoading = false;\r\n\r\n  constructor(private modalCtrl: ModalController, private errService: ErrorService) {}\r\n\r\n  ngOnInit() {\r\n    if (!this.callbackFn) {\r\n      return;\r\n    }\r\n    this.searchSubj\r\n      .asObservable()\r\n      .pipe(\r\n        switchMap((key) => {\r\n          return this.callbackFn(key).pipe(tap((e) => console.log(e)));\r\n        })\r\n      )\r\n      .subscribe(\r\n        (res) => {\r\n          this.isLoading = false;\r\n          this.rawResult = res;\r\n          this.searchResult = res.map(this.transformFn);\r\n        },\r\n        (err) => {\r\n          this.isLoading = false;\r\n          this.errService.logError(err);\r\n        }\r\n      );\r\n    this.getData('');\r\n  }\r\n\r\n  ngAfterViewInit() {}\r\n\r\n  dismiss(paramInd?: number) {\r\n    if (paramInd != null && paramInd >= 0 && paramInd < this.rawResult.length) {\r\n      const result = this.rawResult[paramInd];\r\n      this.selectedResult.emit(result);\r\n      this.modalCtrl.dismiss(result);\r\n    } else {\r\n      this.modalCtrl.dismiss();\r\n    }\r\n  }\r\n\r\n  search() {\r\n    if (this.searchInput && this.searchInput.trim()) {\r\n      this.searchInput = this.searchInput.trim();\r\n      this.getData(this.searchInput);\r\n    }\r\n  }\r\n\r\n  notFound() {\r\n    this.noResultFn(this.searchInput);\r\n    this.dismiss();\r\n  }\r\n\r\n  getData(key?: string) {\r\n    this.isLoading = true;\r\n    this.searchSubj.next(key);\r\n  }\r\n\r\n  onBlur() {\r\n    if (!this.searchInput || this.searchInput.trim() === '') {\r\n      this.dismiss();\r\n    }\r\n  }\r\n}\r\n","<ion-header>\r\n  <ion-toolbar>\r\n    <ion-searchbar\r\n      class=\"ion-margin-top\"\r\n      showCancelButton=\"always\"\r\n      search-icon=\"\"\r\n      debounce=\"500\"\r\n      [(ngModel)]=\"searchInput\"\r\n      placeholder=\"Search\"\r\n      (ionChange)=\"search()\"\r\n      (ionCancel)=\"dismiss()\"\r\n      (ionBlur)=\"onBlur()\"\r\n      [type]=\"searchType ? searchType : 'search'\"\r\n    >\r\n    </ion-searchbar>\r\n  </ion-toolbar>\r\n</ion-header>\r\n<ion-content>\r\n  <ion-list>\r\n    <ion-item *ngIf=\"isLoading\" lines=\"none\">\r\n      <ion-label class=\"ion-text-center\">\r\n        <ion-spinner></ion-spinner>\r\n      </ion-label>\r\n    </ion-item>\r\n    <ion-item button detail=\"false\" *ngFor=\"let item of searchResult; index as i\" (click)=\"dismiss(i)\">\r\n      <ion-label>\r\n        {{ item?.Title }}\r\n        <p *ngIf=\"item?.Label\">\r\n          <ion-note>{{ item?.Label }}</ion-note>\r\n        </p>\r\n      </ion-label>\r\n    </ion-item>\r\n    <ion-item button detail=\"false\" (click)=\"notFound()\" *ngIf=\"searchInput\">\r\n      <ion-label class=\"ion-text-center\">\r\n        <ion-text color=\"primary\">\r\n          <u>Not found? Click here</u>\r\n        </ion-text>\r\n      </ion-label>\r\n    </ion-item>\r\n  </ion-list>\r\n</ion-content>\r\n","export class AutoCompleteModel {\r\n  Title: string;\r\n  Label: string;\r\n  Note?: string;\r\n  constructor(values: object = {}) {\r\n    Object.assign(this, values);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}