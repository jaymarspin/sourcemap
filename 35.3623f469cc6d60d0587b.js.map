{"version":3,"sources":["./src/app/pages/testdrive/edit-testdrive/components/tdform-sg/tdform-sg.component.html","./src/app/pages/testdrive/edit-testdrive/components/tdform-sg/tdform-sg.component.ts","./src/app/pages/testdrive/edit-testdrive/edit-testdrive.page.html","./src/app/pages/testdrive/edit-testdrive/edit-testdrive-routing.module.ts","./src/app/pages/testdrive/edit-testdrive/edit-testdrive.page.ts","./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js","./src/app/pages/testdrive/edit-testdrive/edit-testdrive.module.ts"],"names":["TdformSgComponent","translate","contactService","tdChange","countryList","this","getCountryList","addToForm","changes","testdrive","testDriveSG","currentValue","Line1","form","get","value","Line2","PostalCode","Country","emit","addControl","required","updateFormMsg","subscribe","lang","messages","line1","postalCode","routes","path","PARAM_ID","children","component","EditTestdrivePage","route","router","testdriveSrvc","formBuilder","oppService","loadingCtrl","navCtrl","auth","modalController","subs","Subscription","countryCode","environment","maxdate","Date","setFullYear","getFullYear","docList","getContactDocType","tdForm","initTdForm","add","parseURL","paramMap","params","Id","console","log","e","pageTitle","getTestdriveInfo","getCurrentNavigation","extras","state","states","OpportunityId","STATE_OPPID","getData","group","id","name","docType","docNum","birthday","gender","drivingLicense","modelInterest","expDate","plannedStartDate","initErrorMessages","formErrorMessages","key","Object","keys","controls","pipe","mergeMap","from","create","message","loading","present","getOpportunityById","tap","opp","dismiss","err","getContactById","ContactId","Contact","updateForm","map","_","catchError","subUser","filter","user","isLoggedIn","company","distinctUntilChanged","x","y","u","getTdModels","Set","c","Name","setValue","DocType","DocNum","Birthday","Gender","testdriveId","getTestdrivesById","td","Company","componentProps","cmp","team","selectedValues","singleSelect","modal","onDidDismiss","modalData","data","selectedModel","model","JSON","stringify","modelSelected","label","markAsDirty","ModelId","PlannedStartDate","insertTestdrive","reset","back","setTimeout","navigateForward","BASE","done","showModelInterestComp","pathMatch","EditTestdrivePageRoutingModule","forChild","EditTestdrivePageModule"],"mappings":"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","file":"35.3623f469cc6d60d0587b.js","sourcesContent":["<ng-container [formGroup]=\"form\">\r\n  <ion-item>\r\n    <ion-input (ionChange)=\"emit()\" debounce=\"500\" formControlName=\"line1\" placeholder=\"{{ 'EditTestdrivePage_Line1' | translate }}\"></ion-input>\r\n  </ion-item>\r\n  <app-item-err [control]=\"form.controls?.line1\" [messages]=\"messages.line1\"></app-item-err>\r\n  <ion-item>\r\n    <ion-input (ionChange)=\"emit()\" debounce=\"500\" formControlName=\"line2\" placeholder=\"{{ 'EditTestdrivePage_Line2' | translate }}\"></ion-input>\r\n  </ion-item>\r\n  <app-item-err [control]=\"form.controls?.line2\" [messages]=\"messages.line2\"></app-item-err>\r\n  <ion-item>\r\n    <ion-select formControlName=\"country\" (ionChange)=\"emit()\" placeholder=\"{{ 'EditTestdrivePage_Country' | translate }}\" readonly>\r\n      <ion-select-option [value]=\"opt.value\" *ngFor=\"let opt of countryList\">\r\n        {{ opt.label }}\r\n      </ion-select-option>\r\n    </ion-select>\r\n  </ion-item>\r\n  <app-item-err [control]=\"form.controls?.country\" [messages]=\"messages.country\"></app-item-err>\r\n  <ion-item>\r\n    <ion-input (ionChange)=\"emit()\" debounce=\"500\" formControlName=\"postalCode\" placeholder=\"{{ 'EditTestdrivePage_PostalCode' | translate }}\"></ion-input>\r\n  </ion-item>\r\n  <app-item-err [control]=\"form.controls?.postalCode\" [messages]=\"messages.postalCode\"></app-item-err>\r\n  <ion-item></ion-item>\r\n</ng-container>\r\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChange } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { FormErrorMessages } from 'src/app/models/common/form-error.model';\r\nimport { Testdrive } from 'src/app/models/common/testdrive.model';\r\nimport { TestdriveSG } from 'src/app/models/sg/testdrive-sg.model';\r\nimport { CommonContactService } from 'src/app/services/common/contact/contact.service';\r\n\r\n@Component({\r\n  selector: 'app-tdform-sg',\r\n  templateUrl: './tdform-sg.component.html',\r\n  styleUrls: ['./tdform-sg.component.scss'],\r\n})\r\nexport class TdformSgComponent implements OnInit, OnChanges {\r\n  @Input() form: FormGroup;\r\n  @Input() messages: FormErrorMessages;\r\n  @Input() testdrive: Testdrive;\r\n  @Output() tdChange = new EventEmitter<TestdriveSG>();\r\n  countryList = this.contactService.getCountryList();\r\n  testDriveSG: TestdriveSG;\r\n\r\n  constructor(private translate: TranslateService, private contactService: CommonContactService) {}\r\n\r\n  ngOnInit() {\r\n    this.addToForm();\r\n  }\r\n\r\n  ngOnChanges(changes: { [propKey: string]: SimpleChange }) {\r\n    if (changes.testdrive) {\r\n      this.testDriveSG = changes.testdrive.currentValue as TestdriveSG;\r\n    }\r\n  }\r\n\r\n  emit() {\r\n    this.testDriveSG.Line1 = this.form.get('line1').value;\r\n    this.testDriveSG.Line2 = this.form.get('line2').value;\r\n    this.testDriveSG.PostalCode = this.form.get('postalCode').value;\r\n    this.testDriveSG.Country = this.form.get('country').value;\r\n    this.tdChange.emit(this.testDriveSG);\r\n  }\r\n\r\n  private addToForm() {\r\n    if (!this.form) {\r\n      return;\r\n    }\r\n    this.form.addControl('line1', new FormControl('', [Validators.required]));\r\n    this.form.addControl('line2', new FormControl(''));\r\n    this.form.addControl('country', new FormControl(null));\r\n    this.form.addControl('postalCode', new FormControl('', [Validators.required]));\r\n    this.updateFormMsg();\r\n  }\r\n\r\n  private updateFormMsg() {\r\n    this.translate.get('Error_CannotBeEmpty').subscribe((lang) => {\r\n      this.messages.line1 = {\r\n        required: lang,\r\n      };\r\n      this.messages.postalCode = {\r\n        required: lang,\r\n      };\r\n    });\r\n  }\r\n\r\n  // async showModelPopover() {\r\n  //   try {\r\n  //     const popover = await this.popover.create({\r\n  //       component: ModelSelectorComponent,\r\n  //       showBackdrop: true,\r\n  //       cssClass: 'full-popover',\r\n  //       backdropDismiss: false,\r\n  //       animated: false,\r\n  //       componentProps: {\r\n  //         modelList: this.tdModels,\r\n  //         company: this.cmp,\r\n  //       },\r\n  //     });\r\n  //     popover.present();\r\n  //     const popoverData = await popover.onDidDismiss();\r\n  //     if (!popoverData || !popoverData.data) {\r\n  //       return;\r\n  //     }\r\n  //     const curModel = popoverData.data;\r\n  //     if (curModel && !this.models.some((x) => x.Id === curModel.Id)) {\r\n  //       this.models.push(curModel);\r\n  //     }\r\n  //     if (!this.cmp && curModel.company.Name && curModel.company.Id) {\r\n  //       this.cmp = Object.assign(new Company(), curModel.company);\r\n  //     }\r\n  //   } catch (err) {\r\n  //     this.err.logError(err);\r\n  //     this.err.presentServerErr(err);\r\n  //   }\r\n  // }\r\n}\r\n","<ion-header>\r\n  <ion-toolbar color=\"primary\" mode=\"ios\">\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"\" text=\"{{'Common_Back'|translate}}\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-buttons slot=\"end\">\r\n      <ion-button (click)=\"done()\">{{'Common_Done'|translate}}</ion-button>\r\n    </ion-buttons>\r\n    <ion-title>{{pageTitle}}</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n<ion-content>\r\n  <form [formGroup]=\"tdForm\">\r\n    <ion-item>\r\n      <ion-input formControlName=\"name\" placeholder='{{\"EditTestdrive_Name\"|translate}}'></ion-input>\r\n    </ion-item>\r\n    <app-item-err [control]=\"tdForm.controls?.name\" [messages]=\"formErrorMessages.name\"></app-item-err>\r\n    <ion-item>\r\n      <ion-select formControlName=\"docType\" placeholder='{{\"EditContact_ID\"|translate}}' size=\"12\">\r\n        <ion-select-option [value]=\"opt.value\" *ngFor=\"let opt of docList\">{{ opt.label }}</ion-select-option>\r\n      </ion-select>\r\n    </ion-item>\r\n    <app-item-err [control]=\"tdForm.controls?.docType\" [messages]=\"formErrorMessages.docType\"></app-item-err>\r\n    <ion-item>\r\n      <ion-input formControlName=\"docNum\" placeholder='{{\"EditTestdrive_DocumentNumber\"|translate}}'></ion-input>\r\n    </ion-item>\r\n    <app-item-err [control]=\"tdForm.controls?.docNum\" [messages]=\"formErrorMessages.docNum\"></app-item-err>\r\n    <ion-item>\r\n      <ion-datetime formControlName=\"birthday\" displayFormat=\"DD MMM YYYY\" placeholder='{{\"EditTestdrive_Birthday\"|translate}}'></ion-datetime>\r\n    </ion-item>\r\n    <app-item-err [control]=\"tdForm.controls?.birthday\" [messages]=\"formErrorMessages.birthday\"></app-item-err>\r\n    <ion-item>\r\n      <ion-input formControlName=\"gender\" placeholder='{{\"EditTestdrive_Gender\"|translate}}'></ion-input>\r\n    </ion-item>\r\n    <app-item-err [control]=\"tdForm.controls?.gender\" [messages]=\"formErrorMessages.gender\"></app-item-err>\r\n    <ion-item lines=\"none\">\r\n      <ion-input formControlName=\"modelInterest\" placeholder=\"Model Interest\" (ionFocus)=\"showModelInterestComp()\" class=\"w100\"></ion-input>\r\n    </ion-item>\r\n    <app-item-err [control]=\"tdForm.controls?.modelInterest\" [messages]=\"formErrorMessages.modelInterest\"></app-item-err>\r\n    <ion-item *ngIf=\"countryCode == 'my'\">\r\n      <ion-input formControlName=\"drivingLicense\" placeholder='{{\"EditTestdrive_DrivingLicense\"|translate}}'></ion-input>\r\n    </ion-item>\r\n    <app-item-err [control]=\"tdForm.controls?.drivingLicense\" [messages]=\"formErrorMessages.drivingLicense\"></app-item-err>\r\n    <ion-item *ngIf=\"countryCode == 'my'\">\r\n      <ion-datetime\r\n        displayFormat=\"DD-MM-YYYY\"\r\n        formControlName=\"expDate\"\r\n        max=\"{{maxdate}}\"\r\n        placeholder='{{\"EditTestdrive_ExpiryDate\"|translate}}'\r\n      ></ion-datetime>\r\n    </ion-item>\r\n    <app-item-err *ngIf=\"countryCode == 'my'\" [control]=\"tdForm.controls?.expDate\" [messages]=\"formErrorMessages.expDate\"></app-item-err>\r\n    <app-tdform-sg\r\n      [form]=\"tdForm\"\r\n      [testdrive]=\"testdrive\"\r\n      [messages]=\"formErrorMessages\"\r\n      (tdChange)=\"setTestdrive($event)\"\r\n      *ngIf=\"countryCode == 'my'\"\r\n    ></app-tdform-sg>\r\n    <ion-item *ngIf=\"countryCode == 'my'\">\r\n      <ion-datetime\r\n        displayFormat=\"DD MMM YYYY hh:mm A\"\r\n        formControlName=\"plannedStartDate\"\r\n        max=\"{{maxdate}}\"\r\n        placeholder='{{\"EditTestdrive_PlannedStartDate\"|translate}}'\r\n      ></ion-datetime>\r\n    </ion-item>\r\n    <app-item-err [control]=\"tdForm.controls?.plannedStartDate\" [messages]=\"formErrorMessages.plannedStartDate\"></app-item-err>\r\n  </form>\r\n</ion-content>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { EditTestdrivePage } from './edit-testdrive.page';\r\nimport { EditTestdrivePageRoutingKeys } from './edit-testdrive-routing.keys';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: `:${EditTestdrivePageRoutingKeys.PARAM_ID}`,\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: EditTestdrivePage,\r\n        pathMatch: 'full',\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class EditTestdrivePageRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { LoadingController, ModalController, NavController } from '@ionic/angular';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { from, Subscription } from 'rxjs';\r\nimport { catchError, distinctUntilKeyChanged, filter, map, mergeMap, tap } from 'rxjs/operators';\r\nimport { ModelInterestSelectorComponent } from 'src/app/components/common/model-interest-selector/model-interest-selector.component';\r\nimport { ContactModel } from 'src/app/models/common/contact.model';\r\nimport { FormErrorMessages } from 'src/app/models/common/form-error.model';\r\nimport { CheckboxModel } from 'src/app/models/common/model-interest-selector.model';\r\nimport { Opportunity } from 'src/app/models/common/opportunity.model';\r\nimport { Testdrive } from 'src/app/models/common/testdrive.model';\r\nimport { AuthenticationService } from 'src/app/services/common/auth/auth.service';\r\nimport { CommonContactService } from 'src/app/services/common/contact/contact.service';\r\nimport { CommonOpportunityService } from 'src/app/services/common/opportunity/opportunity.service';\r\nimport { CommonTestdriveService } from 'src/app/services/common/testdrive/testdrive.service';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ViewTestdrivePageRoutingKeys } from '../view-testdrive/view-testdrive-routing.keys';\r\nimport { EditTestdrivePageRoutingKeys } from './edit-testdrive-routing.keys';\r\n\r\n@Component({\r\n  selector: 'app-edit-testdrive',\r\n  templateUrl: './edit-testdrive.page.html',\r\n  styleUrls: ['./edit-testdrive.page.scss'],\r\n})\r\nexport class EditTestdrivePage implements OnInit {\r\n  private subs = new Subscription();\r\n  countryCode = environment.countryCode;\r\n  pageTitle: string;\r\n  testdrive: Testdrive;\r\n  tdForm: FormGroup;\r\n  formErrorMessages: FormErrorMessages;\r\n  opp: Opportunity;\r\n  maxdate = new Date(new Date().setFullYear(new Date().getFullYear() + 5)).getFullYear();\r\n  contact: ContactModel;\r\n  states: object;\r\n  modelSelected: CheckboxModel;\r\n  docList = this.contactService.getContactDocType();\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private translate: TranslateService,\r\n    private testdriveSrvc: CommonTestdriveService,\r\n    private formBuilder: FormBuilder,\r\n    private oppService: CommonOpportunityService,\r\n    private loadingCtrl: LoadingController,\r\n    private navCtrl: NavController,\r\n    private contactService: CommonContactService,\r\n    private auth: AuthenticationService,\r\n    private modalController: ModalController\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.tdForm = this.initTdForm();\r\n    this.subs.add(this.parseURL());\r\n  }\r\n\r\n  parseURL() {\r\n    this.testdrive = new Testdrive();\r\n    return this.route.paramMap.subscribe((params) => {\r\n      this.testdrive.Id = params.get(EditTestdrivePageRoutingKeys.PARAM_ID);\r\n      if (this.testdrive.Id === EditTestdrivePageRoutingKeys.PARAM_ID) {\r\n        console.log(this.testdrive);\r\n        this.translate.get('EditTestdrivePage_New').subscribe((e) => {\r\n          this.pageTitle = e;\r\n        });\r\n      } else {\r\n        this.translate.get('EditTestdrivePage_Edit').subscribe((e) => {\r\n          this.pageTitle = e;\r\n          this.getTestdriveInfo(this.testdrive.Id);\r\n        });\r\n      }\r\n      if (this.router.getCurrentNavigation().extras.state) {\r\n        this.states = this.router.getCurrentNavigation().extras.state;\r\n        this.testdrive.OpportunityId = this.states[EditTestdrivePageRoutingKeys.STATE_OPPID];\r\n      }\r\n      this.getData();\r\n    });\r\n  }\r\n\r\n  private initTdForm(): FormGroup {\r\n    const tdForm = this.formBuilder.group({\r\n      id: [''],\r\n      name: ['', Validators.required],\r\n      docType: ['', Validators.required],\r\n      docNum: ['', Validators.required],\r\n      birthday: ['', Validators.required],\r\n      gender: ['', Validators.required],\r\n      drivingLicense: ['', Validators.required],\r\n      modelInterest: ['', Validators.required],\r\n      expDate: [''],\r\n      plannedStartDate: ['', Validators.required],\r\n    });\r\n    this.initErrorMessages(tdForm);\r\n    return tdForm;\r\n  }\r\n\r\n  private initErrorMessages(form: FormGroup) {\r\n    this.translate.get('Error_CannotBeEmpty').subscribe((lang) => {\r\n      this.formErrorMessages = {\r\n        group: {},\r\n      };\r\n      if (!form) {\r\n        return;\r\n      }\r\n      for (const key of Object.keys(form.controls)) {\r\n        switch (key) {\r\n          case 'drivingLicense':\r\n          case 'expDate':\r\n          case 'plannedStartDate':\r\n            this.formErrorMessages[key] = {\r\n              required: lang,\r\n            };\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  getData() {\r\n    this.translate\r\n      .get('Common_Loading')\r\n      .pipe(\r\n        mergeMap((lang) => {\r\n          return from(\r\n            this.loadingCtrl.create({\r\n              message: lang,\r\n            })\r\n          );\r\n        }),\r\n        mergeMap((loading) => {\r\n          loading.present();\r\n          return this.oppService.getOpportunityById(this.testdrive.OpportunityId).pipe(\r\n            tap(\r\n              (e) => {\r\n                this.opp = e;\r\n                loading.dismiss();\r\n              },\r\n              (err) => {\r\n                loading.dismiss();\r\n              }\r\n            ),\r\n            mergeMap((opp) => {\r\n              console.log(opp);\r\n              return this.contactService.getContactById(opp.ContactId).pipe(\r\n                tap(\r\n                  (e) => {\r\n                    this.testdrive.Contact = e;\r\n                    // this.testdrive.DocType = this.contact.DocType;\r\n                    // this.testdrive.ContactName = this.contact.Name;\r\n                    // this.testdrive.ContactId = this.contact.Id;\r\n                    // this.testdrive.DocNum = this.contact.DocNum;\r\n                    this.updateForm();\r\n                    loading.dismiss();\r\n                  },\r\n                  (err) => {\r\n                    loading.dismiss();\r\n                  }\r\n                )\r\n              );\r\n            }),\r\n            map((_) => {\r\n              return loading;\r\n            }),\r\n            catchError((err) => {\r\n              loading.dismiss();\r\n              throw err;\r\n            })\r\n          );\r\n        }),\r\n        mergeMap((loading) => {\r\n          return this.auth.subUser().pipe(\r\n            filter((user) => user != null && user.isLoggedIn && !!user.company),\r\n            distinctUntilKeyChanged('userId'),\r\n            mergeMap((u) => {\r\n              return this.testdriveSrvc.getTdModels(new Set(u.company.map((c) => c.Name))).pipe(\r\n                tap(\r\n                  (e) => {\r\n                    console.log(e);\r\n                    loading.dismiss();\r\n                  },\r\n                  (err) => {\r\n                    loading.dismiss();\r\n                  }\r\n                )\r\n              );\r\n            }),\r\n            map((_) => {\r\n              return loading;\r\n            }),\r\n            catchError((err) => {\r\n              loading.dismiss();\r\n              throw err;\r\n            })\r\n          );\r\n        })\r\n      )\r\n      .subscribe((loading) => {\r\n        loading.dismiss();\r\n      });\r\n  }\r\n\r\n  updateForm() {\r\n    this.tdForm.get('name').setValue(this.testdrive.Contact.Name);\r\n    this.tdForm.get('docType').setValue(this.testdrive.Contact.DocType);\r\n    this.tdForm.get('docNum').setValue(this.testdrive.Contact.DocNum);\r\n    this.tdForm.get('birthday').setValue(this.testdrive.Contact.Birthday);\r\n    this.tdForm.get('gender').setValue(this.testdrive.Contact.Gender);\r\n  }\r\n\r\n  getTestdriveInfo(testdriveId: string) {\r\n    this.testdriveSrvc.getTestdrivesById(testdriveId).subscribe((e) => {\r\n      this.testdrive = e;\r\n      console.log(e);\r\n    });\r\n  }\r\n\r\n  setTestdrive(td: Testdrive) {\r\n    this.testdrive = td;\r\n    console.log(this.testdrive);\r\n  }\r\n\r\n  showModelInterestComp() {\r\n    console.log('test');\r\n    if (!this.opp.Company) {\r\n      // show error message to select company\r\n      return;\r\n    }\r\n    from(\r\n      this.modalController.create({\r\n        component: ModelInterestSelectorComponent,\r\n        componentProps: {\r\n          cmp: this.opp.Company,\r\n          team: '',\r\n          selectedValues: this.tdForm.get('modelInterest').value,\r\n          singleSelect: true,\r\n        },\r\n      })\r\n    ).subscribe((modal) => {\r\n      from(modal.onDidDismiss()).subscribe((modalData) => {\r\n        if (modalData && modalData.data) {\r\n          const selectedModel: Array<CheckboxModel> = modalData.data.map((model) => model);\r\n          if (JSON.stringify(this.tdForm.get('modelInterest').value) !== JSON.stringify(selectedModel)) {\r\n            this.modelSelected = selectedModel[0];\r\n            this.tdForm.get('modelInterest').setValue(this.modelSelected.label);\r\n            this.tdForm.markAsDirty();\r\n          }\r\n        }\r\n      });\r\n      modal.present();\r\n    });\r\n  }\r\n\r\n  // this.tdForm.get('name').setValue(this.contact.Name);\r\n  // this.tdForm.get('docType').setValue(this.contact.DocType);\r\n  // this.tdForm.get('docNum').setValue(this.contact.DocNum);\r\n  // this.tdForm.get('birthday').setValue(this.contact.Birthday);\r\n  // this.tdForm.get('gender').setValue(this.contact.Gender);\r\n\r\n  done() {\r\n    this.testdrive.Contact.Name = this.tdForm.get('name').value;\r\n    this.testdrive.Contact.DocType = this.tdForm.get('docType').value;\r\n    this.testdrive.Contact.DocNum = this.tdForm.get('docNum').value;\r\n    this.testdrive.Contact.Birthday = this.tdForm.get('birthday').value;\r\n    this.testdrive.Contact.Gender = this.tdForm.get('gender').value;\r\n    this.testdrive.ModelId = this.modelSelected.value;\r\n    this.testdrive.PlannedStartDate = this.tdForm.get('plannedStartDate').value;\r\n    this.translate\r\n      .get('Common_Saving')\r\n      .pipe(\r\n        mergeMap((lang) => {\r\n          return from(\r\n            this.loadingCtrl.create({\r\n              message: lang,\r\n            })\r\n          );\r\n        }),\r\n        mergeMap((loading) => {\r\n          loading.present();\r\n          return this.testdriveSrvc.insertTestdrive(this.testdrive).pipe(\r\n            tap(\r\n              (e) => {\r\n                console.log(e);\r\n                this.testdrive = e;\r\n                loading.dismiss();\r\n              },\r\n              (err) => {\r\n                loading.dismiss();\r\n              }\r\n            )\r\n          );\r\n        })\r\n      )\r\n      .subscribe((e) => {\r\n        this.tdForm.reset();\r\n        this.navCtrl.back();\r\n        setTimeout((_) => {\r\n          this.navCtrl.navigateForward(ViewTestdrivePageRoutingKeys.BASE + '/' + this.testdrive.Id);\r\n        }, 1000);\r\n      });\r\n  }\r\n}\r\n","import { distinctUntilChanged } from './distinctUntilChanged';\nexport function distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged((x, y) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { EditTestdrivePageRoutingModule } from './edit-testdrive-routing.module';\r\n\r\nimport { EditTestdrivePage } from './edit-testdrive.page';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ItemErrComponentModule } from 'src/app/components/common/item-err/item-err.module';\r\nimport { TdformSgComponent } from './components/tdform-sg/tdform-sg.component';\r\nimport { ModelSelectorComponent } from '../components/model-selector/model-selector.component';\r\nimport { KeyScannerComponent } from '../components/key-scanner/key-scanner.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, TranslateModule, IonicModule, EditTestdrivePageRoutingModule, ItemErrComponentModule],\r\n  declarations: [EditTestdrivePage, TdformSgComponent, ModelSelectorComponent, KeyScannerComponent],\r\n  entryComponents: [],\r\n})\r\nexport class EditTestdrivePageModule {}\r\n"],"sourceRoot":"webpack:///"}