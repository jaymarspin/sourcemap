{"version":3,"sources":["./src/app/pages/task/edit-event/edit-event-routing.module.ts","./src/app/pages/task/edit-event/edit-event.page.ts","./src/app/pages/task/edit-event/edit-event.page.html","./src/app/pages/task/edit-event/edit-event.module.ts"],"names":["routes","path","PARAM_ID","children","component","EditEventPage","route","translate","eventSrvc","formBuilder","navCtrl","router","loadingCtrl","modalCtrl","contactSrvc","subs","Subscription","maxdate","Date","setFullYear","getFullYear","mindate","alert","this","getAlertTypes","eventForm","initEventForm","add","parseURL","event","paramMap","subscribe","params","Id","get","NEW","e","pageTitle","getData","getCurrentNavigation","extras","state","states","OpportunityId","STATE_OPPID","group","id","taskName","required","contact","startDate","endDate","allDay","notes","initErrorMessages","form","lang","formErrorMessages","key","Object","keys","controls","pipe","mergeMap","from","create","message","loading","present","forkJoin","getEventById","tap","setValues","dismiss","err","setValue","TaskName","ContactName","StartDate","AllDay","EndDate","Alert","Notes","toISOString","value","console","log","upsertEvent","back","componentProps","callbackFn","searchStr","searchByName","transformFn","Title","Name","Label","MobileNo","Note","noResultFn","backdropDismiss","modal","onDidDismiss","modalData","data","ContactId","PersonContactId","done","selectContact","pathMatch","EditEventPageRoutingModule","forChild","EditEventPageModule"],"mappings":"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","file":"33.ff57827af15a6dd38258.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { EditEventPage } from './edit-event.page';\r\nimport { EditEventPageRoutingKeys } from './edit-event-routing.keys';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: `:${EditEventPageRoutingKeys.PARAM_ID}`,\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: EditEventPage,\r\n        pathMatch: 'full',\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class EditEventPageRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { LoadingController, ModalController, NavController } from '@ionic/angular';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { forkJoin, from, Subscription } from 'rxjs';\r\nimport { mergeMap, tap } from 'rxjs/operators';\r\nimport { AutocompleteComponent } from 'src/app/components/common/autocomplete/autocomplete.component';\r\nimport { AutoCompleteModel } from 'src/app/models/common/auto-complete.model';\r\nimport { ContactModel } from 'src/app/models/common/contact.model';\r\nimport { Event } from 'src/app/models/common/event.model';\r\nimport { FormErrorMessages } from 'src/app/models/common/form-error.model';\r\nimport { CommonContactService } from 'src/app/services/common/contact/contact.service';\r\nimport { CommonEventService } from 'src/app/services/common/event/event.service';\r\nimport { EditEventPageRoutingKeys } from './edit-event-routing.keys';\r\n@Component({\r\n  selector: 'app-edit-event',\r\n  templateUrl: './edit-event.page.html',\r\n  styleUrls: ['./edit-event.page.scss'],\r\n})\r\nexport class EditEventPage implements OnInit {\r\n  pageTitle: string;\r\n  private subs = new Subscription();\r\n  event: Event;\r\n  states: object;\r\n  eventForm: FormGroup;\r\n  formErrorMessages: FormErrorMessages;\r\n  maxdate = new Date(new Date().setFullYear(new Date().getFullYear() + 5)).getFullYear();\r\n  mindate = new Date(new Date().setFullYear(new Date().getFullYear() - 5)).getFullYear();\r\n  alert = this.eventSrvc.getAlertTypes();\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private translate: TranslateService,\r\n    private eventSrvc: CommonEventService,\r\n    private formBuilder: FormBuilder,\r\n    private navCtrl: NavController,\r\n    private router: Router,\r\n    private loadingCtrl: LoadingController,\r\n    private modalCtrl: ModalController,\r\n    private contactSrvc: CommonContactService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.eventForm = this.initEventForm();\r\n    this.subs.add(this.parseURL());\r\n  }\r\n\r\n  parseURL() {\r\n    this.event = new Event();\r\n    return this.route.paramMap.subscribe((params) => {\r\n      this.event.Id = params.get(EditEventPageRoutingKeys.PARAM_ID);\r\n      if (this.event.Id === EditEventPageRoutingKeys.NEW) {\r\n        this.translate.get('TasksPage_NewEvent').subscribe((e) => {\r\n          this.pageTitle = e;\r\n          this.event.Id = null;\r\n        });\r\n      } else {\r\n        this.translate.get('TasksPage_EditEvent').subscribe((e) => {\r\n          this.pageTitle = e;\r\n          this.getData();\r\n        });\r\n      }\r\n      if (this.router.getCurrentNavigation().extras.state) {\r\n        this.states = this.router.getCurrentNavigation().extras.state;\r\n        this.event.OpportunityId = this.states[EditEventPageRoutingKeys.STATE_OPPID];\r\n      }\r\n    });\r\n  }\r\n\r\n  private initEventForm(): FormGroup {\r\n    const eventForm = this.formBuilder.group({\r\n      id: [''],\r\n      taskName: ['', [Validators.required]],\r\n      contact: ['', [Validators.required]],\r\n      startDate: ['', [Validators.required]],\r\n      endDate: ['', [Validators.required]],\r\n      allDay: [false, [Validators.required]],\r\n      alert: [''],\r\n      notes: [''],\r\n    });\r\n    this.initErrorMessages(eventForm);\r\n    return eventForm;\r\n  }\r\n\r\n  private initErrorMessages(form: FormGroup) {\r\n    this.translate.get('Error_CannotBeEmpty').subscribe((lang) => {\r\n      this.formErrorMessages = {\r\n        group: {},\r\n      };\r\n      if (!form) {\r\n        return;\r\n      }\r\n      for (const key of Object.keys(form.controls)) {\r\n        switch (key) {\r\n          case 'taskName':\r\n          case 'contact':\r\n          case 'startDate':\r\n          case 'endDate':\r\n          case 'allDay':\r\n            this.formErrorMessages[key] = {\r\n              required: lang,\r\n            };\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  getData() {\r\n    this.translate\r\n      .get('Common_Loading')\r\n      .pipe(\r\n        mergeMap((lang) => {\r\n          return from(\r\n            this.loadingCtrl.create({\r\n              message: lang,\r\n            })\r\n          );\r\n        }),\r\n        mergeMap((loading) => {\r\n          loading.present();\r\n          return forkJoin([\r\n            this.eventSrvc.getEventById(this.event.Id).pipe(\r\n              tap((event) => {\r\n                this.event = event;\r\n                this.setValues();\r\n              })\r\n            ),\r\n          ]).pipe(\r\n            tap(\r\n              (e) => {\r\n                loading.dismiss();\r\n              },\r\n              (err) => {\r\n                loading.dismiss();\r\n              }\r\n            )\r\n          );\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  setValues() {\r\n    this.eventForm.get('id').setValue(this.event.Id);\r\n    this.eventForm.get('taskName').setValue(this.event.TaskName);\r\n    this.eventForm.get('contact').setValue(this.event.ContactName);\r\n    this.eventForm.get('startDate').setValue(this.event.StartDate);\r\n    this.eventForm.get('allDay').setValue(this.event.AllDay);\r\n    this.eventForm.get('endDate').setValue(this.event.EndDate);\r\n    this.eventForm.get('alert').setValue(this.event.Alert);\r\n    this.eventForm.get('notes').setValue(this.event.Notes);\r\n  }\r\n\r\n  getEndDate() {\r\n    if (this.event.StartDate) {\r\n      return new Date(this.event.StartDate).toISOString();\r\n    } else {\r\n      return this.mindate;\r\n    }\r\n  }\r\n\r\n  done() {\r\n    this.event.TaskName = this.eventForm.get('taskName').value;\r\n    this.event.ContactName = this.eventForm.get('contact').value;\r\n    this.event.StartDate = this.eventForm.get('startDate').value;\r\n    this.event.AllDay = this.eventForm.get('allDay').value;\r\n    this.event.EndDate = this.eventForm.get('endDate').value;\r\n    this.event.Alert = this.eventForm.get('alert').value;\r\n    this.event.Notes = this.eventForm.get('notes').value;\r\n    console.log(this.event.Id);\r\n    this.translate\r\n      .get('Common_Saving')\r\n      .pipe(\r\n        mergeMap((lang) => {\r\n          return from(\r\n            this.loadingCtrl.create({\r\n              message: lang,\r\n            })\r\n          );\r\n        }),\r\n        mergeMap((loading) => {\r\n          loading.present();\r\n          return this.eventSrvc.upsertEvent(this.event).pipe(\r\n            tap(\r\n              (e) => {\r\n                loading.dismiss();\r\n              },\r\n              (err) => {\r\n                loading.dismiss();\r\n              }\r\n            )\r\n          );\r\n        })\r\n      )\r\n      .subscribe((e) => {\r\n        this.navCtrl.back();\r\n      });\r\n  }\r\n\r\n  selectContact() {\r\n    from(\r\n      this.modalCtrl.create({\r\n        component: AutocompleteComponent,\r\n        componentProps: {\r\n          callbackFn: (searchStr: string) => {\r\n            return this.contactSrvc.searchByName(searchStr);\r\n          },\r\n          transformFn: (contact: ContactModel) => {\r\n            return new AutoCompleteModel({\r\n              Title: contact.Name,\r\n              Label: `(${contact.MobileNo})`,\r\n              Note: contact.Id,\r\n            });\r\n          },\r\n          noResultFn: (searchStr: string) => {},\r\n          backdropDismiss: false,\r\n        },\r\n      })\r\n    ).subscribe((modal) => {\r\n      from(modal.onDidDismiss()).subscribe((modalData) => {\r\n        if (modalData && modalData.data) {\r\n          this.event.ContactId = modalData.data.PersonContactId;\r\n          this.event.ContactName = modalData.data.Name;\r\n          this.eventForm.get('contact').setValue(modalData.data.Name);\r\n        }\r\n      });\r\n      modal.present();\r\n    });\r\n  }\r\n}\r\n","<ion-header>\r\n  <ion-toolbar color=\"primary\" mode=\"ios\">\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"\" text=\"{{'Common_Back'|translate}}\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-buttons slot=\"end\">\r\n      <ion-button (click)=\"done()\" [disabled]=\"eventForm.invalid\">{{'Common_Done'|translate}}</ion-button>\r\n    </ion-buttons>\r\n    <ion-title>{{pageTitle}}</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n<ion-content>\r\n  <form [formGroup]=\"eventForm\">\r\n    <ion-item>\r\n      <ion-input formControlName=\"taskName\" placeholder='{{\"TasksPage_EditEvent\"|translate}}'></ion-input>\r\n    </ion-item>\r\n    <app-item-err [control]=\"eventForm.controls?.taskName\" [messages]=\"formErrorMessages.taskName\"></app-item-err>\r\n    <!-- <ion-item>\r\n      <ion-select formControlName=\"status\" placeholder='{{\"EditTaskPage_Status\"|translate}}'>\r\n        <ion-select-option [value]=\"opt.value\" *ngFor=\"let opt of status\"> {{ opt.label }} </ion-select-option>\r\n      </ion-select>\r\n    </ion-item>\r\n    <app-item-err [control]=\"eventForm.controls?.status\" [messages]=\"formErrorMessages.status\"></app-item-err> -->\r\n    <ion-item>\r\n      <ion-input formControlName=\"contact\" placeholder='{{\"EditTaskPage_Contacts\"|translate}}' (click)=\"selectContact()\"></ion-input>\r\n    </ion-item>\r\n    <app-item-err [control]=\"eventForm.controls?.contact\" [messages]=\"formErrorMessages.contact\"></app-item-err>\r\n    <ion-grid class=\"ion-no-margin ion-no-padding\">\r\n      <ion-row>\r\n        <ion-col size=\"12\">\r\n          <ion-item lines=\"none\">\r\n            <ion-datetime\r\n              formControlName=\"startDate\"\r\n              displayFormat=\"DD MMM YYYY HH:mm\"\r\n              placeholder='{{\"EditTaskPage_StartDate\"|translate}}'\r\n              min=\"{{ mindate }}\"\r\n              max=\"{{ maxdate }}\"\r\n            >\r\n            </ion-datetime>\r\n          </ion-item>\r\n        </ion-col>\r\n        <!-- <ion-col size=\"6\">\r\n          <ion-item lines=\"none\">\r\n            <ion-datetime\r\n              formControlName=\"startTime\"\r\n              displayFormat=\"HH:mm\"\r\n              placeholder='{{\"EditTaskPage_StartTime\"|translate}}'\r\n              max=\"{{ maxdate }}\"\r\n            ></ion-datetime>\r\n          </ion-item>\r\n        </ion-col> -->\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col size=\"6\">\r\n          <app-item-err [control]=\"eventForm.controls?.startDate\" [messages]=\"formErrorMessages.startDate\"></app-item-err>\r\n        </ion-col>\r\n        <!-- <ion-col size=\"6\">\r\n          <app-item-err [control]=\"eventForm.controls?.startTime\" [messages]=\"formErrorMessages.startTime\"></app-item-err>\r\n        </ion-col> -->\r\n      </ion-row>\r\n    </ion-grid>\r\n    <ion-item>\r\n      <ion-label>{{\"EditTaskPage_AllDay\"|translate}}</ion-label>\r\n      <ion-checkbox slot=\"end\" formControlName=\"allDay\"></ion-checkbox>\r\n    </ion-item>\r\n    <app-item-err [control]=\"eventForm.controls?.allDay\" [messages]=\"formErrorMessages.allDay\"></app-item-err>\r\n    <ion-grid class=\"ion-no-margin ion-no-padding\">\r\n      <ion-row>\r\n        <ion-col size=\"12\">\r\n          <ion-item lines=\"none\">\r\n            <ion-datetime\r\n              formControlName=\"endDate\"\r\n              displayFormat=\"DD MMM YYYY HH:mm\"\r\n              placeholder='{{\"EditTaskPage_EndDate\"|translate}}'\r\n              min=\"{{ getEndDate() }}\"\r\n              max=\"{{ maxdate }}\"\r\n            >\r\n            </ion-datetime>\r\n          </ion-item>\r\n        </ion-col>\r\n        <!-- <ion-col size=\"6\">\r\n          <ion-item lines=\"none\">\r\n            <ion-datetime formControlName=\"endTime\" displayFormat=\"HH:mm\" placeholder='{{\"EditTaskPage_EndTime\"|translate}}' max=\"{{ maxdate }}\"></ion-datetime>\r\n          </ion-item>\r\n        </ion-col> -->\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col size=\"6\">\r\n          <app-item-err [control]=\"eventForm.controls?.endDate\" [messages]=\"formErrorMessages.endDate\"></app-item-err>\r\n        </ion-col>\r\n        <!-- <ion-col size=\"6\">\r\n          <app-item-err [control]=\"eventForm.controls?.endTime\" [messages]=\"formErrorMessages.endTime\"></app-item-err>\r\n        </ion-col> -->\r\n      </ion-row>\r\n    </ion-grid>\r\n    <!-- <ion-item>\r\n      <ion-select formControlName=\"alert\" placeholder='{{\"EditTaskPage_Alert\"|translate}}'>\r\n        <ion-select-option [value]=\"opt.value\" *ngFor=\"let opt of alert\"> {{ opt.label }} </ion-select-option>\r\n      </ion-select>\r\n    </ion-item>\r\n    <app-item-err [control]=\"eventForm.controls?.alert\" [messages]=\"formErrorMessages.alert\"></app-item-err> -->\r\n\r\n    <ion-item class=\"ion-margin-top\">\r\n      <ion-textarea rows=\"6\" formControlName=\"notes\" placeholder='{{\"EditTaskPage_Notes\"|translate}}'></ion-textarea>\r\n    </ion-item>\r\n    <app-item-err [control]=\"eventForm.controls?.notes\" [messages]=\"formErrorMessages.notes\"></app-item-err>\r\n  </form>\r\n</ion-content>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { EditEventPageRoutingModule } from './edit-event-routing.module';\r\n\r\nimport { EditEventPage } from './edit-event.page';\r\nimport { AutocompleteComponentModule } from 'src/app/components/common/autocomplete/autocomplete.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ItemErrComponentModule } from 'src/app/components/common/item-err/item-err.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ReactiveFormsModule,\r\n    TranslateModule,\r\n    ItemErrComponentModule,\r\n    AutocompleteComponentModule,\r\n    EditEventPageRoutingModule,\r\n  ],\r\n  declarations: [EditEventPage],\r\n})\r\nexport class EditEventPageModule {}\r\n"],"sourceRoot":"webpack:///"}