{"version":3,"sources":["./src/app/pages/task/component/filter-task/filter-task.component.ts","./src/app/pages/task/component/filter-task/filter-task.component.html","./src/app/pages/task/component/calendar/calendar.component.html","./src/app/pages/task/component/calendar/calendar.component.ts","./src/app/pages/task/tasks.page.html","./src/app/pages/task/tasks-routing.module.ts","./src/app/pages/task/tasks.page.ts","./src/app/pages/task/tasks.module.ts","./src/app/pages/task/edit-task/edit-task-routing.keys.ts","./src/app/pages/task/edit-event/edit-event-routing.keys.ts","./src/app/services/common/event/event.service.ts"],"names":["FilterTaskComponent","modalCtrl","maxdate","Date","setFullYear","getFullYear","mindate","this","filterObj","reset","category","taskStatus","endDate","startDate","toLocaleLowerCase","type","toISOString","dismiss","cancel","updateTaskStatus","apply","CalendarViewComponent","router","translate","actionSheet","month","eventSource","calendar","mode","currentDate","step","startingDayWeek","changes","plotEvent","myCal","slideNext","slidePrev","title","viewTitle","emit","event","events","tasks","forEach","el","DueDate","getMonth","getDate","push","TaskName","startTime","endTime","allDay","Id","ContactName","Notes","isComplete","ContactId","OpportunityId","CreatedDate","SourceName","Category","Status","Alert","StartDate","EndDate","startDT","getHours","getMinutes","getSeconds","getMilliseconds","endDT","AllDay","item","oppId","PARAM_ID","navigate","BASE","state","Object","STATE_OPPID","navigationExtras","btns","from","create","pipe","mergeMap","alert","forkJoin","get","tap","e","header","text","handler","of","subscribe","buttons","present","back","next","onEventSelected","onViewTitleChanged","routes","path","children","component","TasksPage","route","taskSrvc","eventSrvc","loadingCtrl","subs","Subscription","isListView","add","parseURL","paramMap","params","NEW","getEventsAndTasks","then","filter","lang","message","loading","startOfMonth","moment","startOf","endOfMonth","endOf","getTasks","searchInput","getEvents","err","d","currDate","backdropDismiss","animated","cssClass","componentProps","assign","modal","onDidDismiss","res","data","pathMatch","loadChildren","m","EditTaskPageModule","EditEventPageModule","TasksPageRoutingModule","forChild","TasksPageModule","EditTaskPageRoutingKeys","EditEventPageRoutingKeys","CommonEventService","eventAPI","eventMetaParam","errorSrvc","startD","endD","taskFilter","search","id","getEventsOffset","presentServerErr","taskId","trim","getEventById","upsertEvent","status"],"mappings":"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","file":"12.86bab5fb3d1051ceb97d.js","sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\r\nimport { TaskFilterModel } from 'src/app/models/common/filter.model';\r\nimport { ModalController } from '@ionic/angular';\r\n\r\n@Component({\r\n  selector: 'app-filter-task',\r\n  templateUrl: './filter-task.component.html',\r\n  styleUrls: ['./filter-task.component.scss'],\r\n})\r\nexport class FilterTaskComponent implements OnInit {\r\n  @Input() filterObj: TaskFilterModel;\r\n  maxdate = new Date(new Date().setFullYear(new Date().getFullYear() + 5)).getFullYear();\r\n  mindate = new Date(new Date().setFullYear(new Date().getFullYear() - 5)).getFullYear();\r\n\r\n  constructor(private modalCtrl: ModalController) {}\r\n\r\n  ngOnInit() {\r\n    if (!this.filterObj) {\r\n      this.reset();\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this.filterObj = {\r\n      category: 'all',\r\n      taskStatus: 'all',\r\n      endDate: '',\r\n      startDate: '',\r\n    };\r\n  }\r\n\r\n  getOpenIcon() {\r\n    if (this.filterObj.taskStatus.toLocaleLowerCase() === 'open') {\r\n      return 'assets/icon/opportunity/unlock.svg';\r\n    } else {\r\n      return 'assets/icon/opportunity/unlock-disabled.svg';\r\n    }\r\n  }\r\n\r\n  updateTaskStatus(type: string) {\r\n    if (type === 'open') {\r\n      this.filterObj.taskStatus = 'open';\r\n    } else if (type === 'completed') {\r\n      this.filterObj.taskStatus = 'completed';\r\n    } else if (type === 'all') {\r\n      this.filterObj.taskStatus = 'all';\r\n    } else {\r\n      this.filterObj.taskStatus = 'aging';\r\n    }\r\n  }\r\n\r\n  getEndDate() {\r\n    if (this.filterObj.startDate) {\r\n      return new Date(this.filterObj.startDate).toISOString();\r\n    } else {\r\n      return this.mindate;\r\n    }\r\n  }\r\n\r\n  apply() {\r\n    this.modalCtrl.dismiss(this.filterObj);\r\n  }\r\n\r\n  cancel() {\r\n    this.modalCtrl.dismiss();\r\n  }\r\n}\r\n","<ion-header class=\"ion-no-border\">\r\n  <ion-toolbar color=\"primary\" mode=\"ios\">\r\n    <ion-buttons slot=\"start\">\r\n      <ion-button (click)=\"cancel()\">\r\n        <ion-icon slot=\"icon-only\" name=\"arrow-back\"></ion-icon>\r\n      </ion-button>\r\n    </ion-buttons>\r\n    <ion-buttons slot=\"end\">\r\n      <ion-button (click)=\"reset()\">\r\n        {{ 'TasksFilter_Reset' | translate }}\r\n      </ion-button>\r\n    </ion-buttons>\r\n    <ion-title>{{ 'TasksFilter_Filter' | translate }}</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n<ion-content>\r\n  <ion-grid class=\"ion-padding bg-white\">\r\n    <ion-row class=\"ion-no-margin ion-no-padding\">\r\n      <ion-col size=\"12\">\r\n        <ion-label>\r\n          {{ 'TasksFilter_Status' | translate }}\r\n        </ion-label>\r\n      </ion-col>\r\n    </ion-row>\r\n    <ion-row class=\"ion-text-center ion-padding-top\">\r\n      <ion-col class=\"header-btn\" (click)=\"updateTaskStatus('all')\" [class.activated]=\"filterObj.taskStatus === 'all'\">\r\n        <ion-icon name=\"apps\" [color]=\"filterObj.taskStatus === 'all' ? 'primary' : 'medium'\"></ion-icon>\r\n\r\n        <ion-label class=\"mat-small\">\r\n          {{ 'TasksFilter_All' | translate }}\r\n        </ion-label>\r\n      </ion-col>\r\n      <ion-col class=\"header-btn\" (click)=\"updateTaskStatus('open')\" [class.activated]=\"filterObj.taskStatus === 'open'\">\r\n        <ion-icon src=\"{{ getOpenIcon() }}\" [color]=\"filterObj.taskStatus === 'open' ? 'primary' : 'medium'\"></ion-icon>\r\n\r\n        <ion-label class=\"mat-small\">\r\n          {{ 'TasksFilter_Open' | translate }}\r\n        </ion-label>\r\n      </ion-col>\r\n      <ion-col class=\"header-btn\" (click)=\"updateTaskStatus('completed')\" [class.activated]=\"filterObj.taskStatus === 'completed'\">\r\n        <ion-icon name=\"checkmark\" [color]=\"filterObj.taskStatus === 'completed' ? 'primary' : 'medium'\"></ion-icon>\r\n\r\n        <ion-label class=\"mat-small\">\r\n          {{ 'TasksFilter_Completed' | translate }}\r\n        </ion-label>\r\n      </ion-col>\r\n      <ion-col class=\"header-btn\" (click)=\"updateTaskStatus('aging')\" [class.activated]=\"filterObj.taskStatus === 'aging'\">\r\n        <ion-icon name=\"timer\" [color]=\"filterObj.taskStatus === 'aging' ? 'primary' : 'medium'\"></ion-icon>\r\n\r\n        <ion-label class=\"mat-small\">\r\n          {{ 'TasksFilter_Aging' | translate }}\r\n        </ion-label>\r\n      </ion-col>\r\n    </ion-row>\r\n    <ion-row class=\"ion-no-padding ion-margin-top\">\r\n      <ion-col class=\"ion-no-margin ion-no-padding\">\r\n        <ion-grid class=\"ion-no-margin bg-white ion-no-padding\">\r\n          <ion-row class=\"ion-no-margin ion-no-padding\">\r\n            <ion-col size=\"6\" class=\"ion-no-margin ion-no-padding\">\r\n              <ion-label class=\"ion-no-margin ion-no-padding\">\r\n                {{ 'TasksFilter_StartDate' | translate }}\r\n              </ion-label>\r\n            </ion-col>\r\n            <ion-col size=\"6\">\r\n              <ion-label>\r\n                {{ 'TasksFilter_EndDate' | translate }}\r\n              </ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <ion-row>\r\n            <ion-col size=\"6\">\r\n              <ion-item lines=\"none\">\r\n                <ion-datetime [(ngModel)]=\"filterObj.startDate\" displayFormat=\"MMM DD YYYY\" min=\"{{ mindate }}\" max=\"{{ maxdate }}\"></ion-datetime>\r\n              </ion-item>\r\n            </ion-col>\r\n            <ion-col size=\"6\">\r\n              <ion-item lines=\"none\">\r\n                <ion-datetime [(ngModel)]=\"filterObj.endDate\" displayFormat=\"MMM DD YYYY\" min=\"{{ getEndDate() }}\" max=\"{{ maxdate }}\"></ion-datetime>\r\n              </ion-item>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid>\r\n</ion-content>\r\n<ion-footer class=\"ion-padding\">\r\n  <ion-button fill=\"solid\" expand=\"block\" color=\"primary\" (click)=\"apply()\">\r\n    {{ 'Common_Apply' | translate }}\r\n  </ion-button>\r\n</ion-footer>\r\n","<ion-content>\r\n  <ion-grid>\r\n    <ion-row class=\"ion-align-items-center bg-white\">\r\n      <!-- Move back one screen of the slides -->\r\n      <ion-col size=\"2\">\r\n        <ion-button fill=\"clear\" (click)=\"back()\">\r\n          <ion-icon name=\"arrow-back\" slot=\"icon-only\"></ion-icon>\r\n        </ion-button>\r\n      </ion-col>\r\n\r\n      <ion-col size=\"8\" class=\"ion-text-center\">\r\n        <ion-text>\r\n          <h2>{{ viewTitle }}</h2>\r\n        </ion-text>\r\n      </ion-col>\r\n\r\n      <!-- Move forward one screen of the slides -->\r\n      <ion-col size=\"2\">\r\n        <ion-button fill=\"clear\" (click)=\"next()\">\r\n          <ion-icon name=\"arrow-forward\" slot=\"icon-only\"></ion-icon>\r\n        </ion-button>\r\n      </ion-col>\r\n    </ion-row>\r\n    <ion-row class=\"bg-white\">\r\n      <ion-col size=\"12\">\r\n        <calendar\r\n          [eventSource]=\"eventSource\"\r\n          [calendarMode]=\"calendar.mode\"\r\n          [currentDate]=\"calendar.currentDate\"\r\n          (onEventSelected)=\"onEventSelected($event)\"\r\n          (onTitleChanged)=\"onViewTitleChanged($event)\"\r\n          [step]=\"calendar.step\"\r\n          [startingDayWeek]=\"calendar.startingDayWeek\"\r\n          [monthviewEventDetailTemplate]=\"template\"\r\n        >\r\n        </calendar>\r\n      </ion-col>\r\n    </ion-row>\r\n    <ion-row>\r\n      <ion-col size=\"12\" class=\"ion-no-padding ion-no-margin\">\r\n        <ng-template #template let-showEventDetail=\"showEventDetail\" let-selectedDate=\"selectedDate\" let-noEventsLabel=\"noEventsLabel\">\r\n          <div class=\"button-bg ion-padding\">\r\n            <div class=\"border ion-padding ion-text-center\" (click)=\"add()\">\r\n              <ion-icon name=\"add-circle\" color=\"primary\" class=\"add-icon\"></ion-icon>\r\n              <ion-label color=\"primary\">\r\n                {{ 'TasksPage_NewTask' | translate }}\r\n              </ion-label>\r\n            </div>\r\n          </div>\r\n          <ion-list class=\"event-detail-container\" has-bouncing=\"false\" *ngIf=\"showEventDetail\" overflow-scroll=\"false\">\r\n            <ion-item class=\"ion-text-wrap\" *ngFor=\"let item of selectedDate?.events\">\r\n              <!-- <ion-checkbox slot=\"start\" [(ngModel)]=\"item.isComplete\" (ionChange)=\"setStatus(item)\"></ion-checkbox> -->\r\n              <ion-label (click)=\"eventSelected(item)\">\r\n                <h3>{{ item?.title }}</h3>\r\n                <ul>\r\n                  <li *ngIf=\"item?.ContactName\">\r\n                    <p>\r\n                      {{ item?.ContactName }}\r\n                    </p>\r\n                  </li>\r\n                  <li *ngIf=\"item?.Notes\">\r\n                    <p>{{ item?.Notes }}</p>\r\n                  </li>\r\n                </ul>\r\n              </ion-label>\r\n            </ion-item>\r\n            <ion-item *ngIf=\"selectedDate?.events.length == 0\">\r\n              <div class=\"no-events-label\">{{ 'TasksPage_NoEvent' | translate }}</div>\r\n            </ion-item>\r\n          </ion-list>\r\n        </ng-template>\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid>\r\n</ion-content>\r\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { NavigationExtras, Router } from '@angular/router';\r\nimport { ActionSheetController } from '@ionic/angular';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CalendarComponent } from 'ionic2-calendar';\r\nimport { CalendarMode, Step } from 'ionic2-calendar/calendar';\r\nimport { forkJoin, from, of } from 'rxjs';\r\nimport { mergeMap, tap } from 'rxjs/operators';\r\nimport { Event } from 'src/app/models/common/event.model';\r\nimport { Task } from 'src/app/models/common/task.model';\r\nimport { EditEventPageRoutingKeys } from '../../edit-event/edit-event-routing.keys';\r\nimport { EditTaskPageRoutingKeys } from '../../edit-task/edit-task-routing.keys';\r\nimport { TasksPageRoutingKeys } from '../../tasks-routing.keys';\r\n\r\n@Component({\r\n  selector: 'app-calendar',\r\n  templateUrl: './calendar.component.html',\r\n  styleUrls: ['./calendar.component.scss'],\r\n})\r\nexport class CalendarViewComponent implements OnInit, OnChanges {\r\n  @Input() tasks: Task[];\r\n  @Input() events: Event[];\r\n  @Input() oppId: string;\r\n  @Output() month = new EventEmitter<string>();\r\n  eventSource = [];\r\n  viewTitle: string;\r\n\r\n  calendar = {\r\n    mode: 'month' as CalendarMode,\r\n    currentDate: new Date(),\r\n    step: 30 as Step,\r\n    startingDayWeek: 1,\r\n  };\r\n\r\n  selectedDate: Date;\r\n  startDate: any;\r\n  endDate: any;\r\n\r\n  @ViewChild(CalendarComponent) myCal: CalendarComponent;\r\n\r\n  constructor(private router: Router, private translate: TranslateService, private actionSheet: ActionSheetController) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.plotEvent();\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  next() {\r\n    this.myCal.slideNext();\r\n  }\r\n\r\n  back() {\r\n    this.myCal.slidePrev();\r\n  }\r\n\r\n  onViewTitleChanged(title: string) {\r\n    this.viewTitle = title;\r\n    this.month.emit(title);\r\n  }\r\n\r\n  async onEventSelected(event) {}\r\n\r\n  plotEvent() {\r\n    const events = [];\r\n    if (this.tasks) {\r\n      this.tasks.forEach((el) => {\r\n        let startDate = new Date(el.DueDate);\r\n        startDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate() + 1);\r\n        const endDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());\r\n        events.push({\r\n          // Calendar Information\r\n          title: el.TaskName,\r\n          startTime: startDate,\r\n          endTime: endDate,\r\n          allDay: true,\r\n\r\n          // Display Information\r\n          Id: el.Id,\r\n          ContactName: el.ContactName,\r\n          Notes: el.Notes,\r\n          isComplete: el.isComplete,\r\n          ContactId: el.ContactId,\r\n          OpportunityId: el.OpportunityId,\r\n          CreatedDate: el.CreatedDate,\r\n          SourceName: el.SourceName,\r\n          Category: el.Category,\r\n          Status: el.Status,\r\n          Alert: el.Alert,\r\n        });\r\n      });\r\n    }\r\n    if (this.events) {\r\n      this.events.forEach((el) => {\r\n        const startDate = new Date(el.StartDate ? el.StartDate : el.EndDate);\r\n        const endDate = new Date(el.EndDate);\r\n        const startDT = new Date(\r\n          startDate.getFullYear(),\r\n          startDate.getMonth(),\r\n          startDate.getDate(),\r\n          startDate.getHours(),\r\n          startDate.getMinutes(),\r\n          startDate.getSeconds(),\r\n          startDate.getMilliseconds()\r\n        );\r\n        const endDT = new Date(\r\n          endDate.getFullYear(),\r\n          endDate.getMonth(),\r\n          endDate.getDate() + (el.AllDay ? 1 : 0),\r\n          endDate.getHours(),\r\n          endDate.getMinutes(),\r\n          endDate.getSeconds(),\r\n          endDate.getMilliseconds()\r\n        );\r\n        events.push({\r\n          // Calendar Information\r\n          title: el.TaskName,\r\n          startTime: startDT,\r\n          endTime: endDT,\r\n          allDay: el.AllDay,\r\n\r\n          // Display Information\r\n          Id: el.Id,\r\n          ContactId: el.ContactId,\r\n          OpportunityId: el.OpportunityId,\r\n          CreatedDate: el.CreatedDate,\r\n          ContactName: el.ContactName,\r\n          SourceName: el.SourceName,\r\n          Category: el.Category,\r\n          Status: el.Status,\r\n          Alert: el.Alert,\r\n          Notes: el.Notes,\r\n          isComplete: el.isComplete,\r\n        });\r\n      });\r\n    }\r\n    this.eventSource = events;\r\n  }\r\n\r\n  async eventSelected(item) {\r\n    const oppId = this.oppId ? this.oppId : TasksPageRoutingKeys.PARAM_ID;\r\n    if (item?.Category === 'Task') {\r\n      this.router.navigate([`${TasksPageRoutingKeys.BASE}/${oppId}/${EditTaskPageRoutingKeys.BASE}/${item.Id}`]);\r\n    } else {\r\n      this.router.navigate([`${TasksPageRoutingKeys.BASE}/${oppId}/${EditEventPageRoutingKeys.BASE}/${item.Id}`]);\r\n    }\r\n  }\r\n\r\n  add() {\r\n    const state = new Object();\r\n    state[EditTaskPageRoutingKeys.STATE_OPPID] = this.oppId;\r\n    const navigationExtras: NavigationExtras = {\r\n      state,\r\n    };\r\n    const oppId = this.oppId ? this.oppId : TasksPageRoutingKeys.PARAM_ID;\r\n    const btns = [];\r\n    from(this.actionSheet.create())\r\n      .pipe(\r\n        mergeMap((alert) => {\r\n          return forkJoin([\r\n            this.translate.get('TasksPage_PleaseSelect').pipe(\r\n              tap((e) => {\r\n                alert.header = e;\r\n              })\r\n            ),\r\n            this.translate.get('TasksPage_CreateEvent').pipe(\r\n              tap((e) => {\r\n                btns.push({\r\n                  text: e,\r\n                  handler: () => {\r\n                    this.router.navigate(\r\n                      [`${TasksPageRoutingKeys.BASE}/${oppId}/${EditEventPageRoutingKeys.BASE}/${EditEventPageRoutingKeys.PARAM_ID}`],\r\n                      navigationExtras\r\n                    );\r\n                  },\r\n                });\r\n              })\r\n            ),\r\n            this.translate.get('TasksPage_CreateTask').pipe(\r\n              tap((e) => {\r\n                btns.push({\r\n                  text: e,\r\n                  handler: () => {\r\n                    this.router.navigate(\r\n                      [`${TasksPageRoutingKeys.BASE}/${oppId}/${EditTaskPageRoutingKeys.BASE}/${EditTaskPageRoutingKeys.PARAM_ID}`],\r\n                      navigationExtras\r\n                    );\r\n                  },\r\n                });\r\n              })\r\n            ),\r\n          ]).pipe(\r\n            mergeMap((e) => {\r\n              return of(alert);\r\n            })\r\n          );\r\n        })\r\n      )\r\n      .subscribe((alert) => {\r\n        alert.buttons = btns;\r\n        alert.present();\r\n      });\r\n  }\r\n\r\n  setStatus(e) {}\r\n}\r\n","<ion-header class=\"ion-no-border\">\r\n  <ion-toolbar color=\"primary\" mode=\"ios\">\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"\" text=\"{{'Common_Back'|translate}}\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-buttons slot=\"end\">\r\n      <ng-container *ngIf=\"isListView\">\r\n        <ion-button (click)=\"switchView()\">\r\n          <ion-icon slot=\"icon-only\" name=\"calendar\"></ion-icon>\r\n        </ion-button>\r\n        <ion-button (click)=\"showFilter()\">\r\n          <ion-icon slot=\"icon-only\" name=\"funnel\"></ion-icon>\r\n        </ion-button>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"!isListView\">\r\n        <ion-button (click)=\"switchView()\">\r\n          <ion-icon slot=\"icon-only\" name=\"list\"></ion-icon>\r\n        </ion-button>\r\n      </ng-container>\r\n    </ion-buttons>\r\n    <ion-title>\r\n      {{\"TasksPage_Tasks\"|translate}} <br />\r\n      <ion-text *ngIf=\"oppId\" class=\"sub-header\"> {{\"TasksPage_OpportunityID\"|translate}}: {{oppId}} </ion-text>\r\n    </ion-title>\r\n  </ion-toolbar>\r\n  <!-- <ion-toolbar class=\"bg\">\r\n    <ion-searchbar\r\n      class=\"ion-margin-top ion-no-padding ion-padding-start ion-padding-end ion-margin-bottom\"\r\n      search-icon=\"\"\r\n      debounce=\"500\"\r\n      [(ngModel)]=\"searchInput\"\r\n      placeholder=\"{{'OffersPage_Search'|translate}}\"\r\n      (ionChange)=\"search()\"\r\n      (ionCancel)=\"getEventsAndTasks()\"\r\n      (ionClear)=\"getEventsAndTasks()\"\r\n    >\r\n    </ion-searchbar>\r\n  </ion-toolbar> -->\r\n</ion-header>\r\n<ion-content>\r\n  <app-calendar [tasks]=\"tasks\" [events]=\"events\" [oppId]=\"oppId\" (month)=\"dateChanged($event)\" *ngIf=\"!isListView\"></app-calendar>\r\n  <!-- <app-list-view\r\n    [oppId]=\"oppId\"\r\n    [filterObj]=\"filterObj\"\r\n    [search]=\"searchInput\"\r\n    *ngIf=\"isListView\"\r\n  ></app-list-view> -->\r\n</ion-content>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { TasksPage } from './tasks.page';\r\nimport { TasksPageRoutingKeys } from './tasks-routing.keys';\r\nimport { EditTaskPageRoutingKeys } from './edit-task/edit-task-routing.keys';\r\nimport { EditEventPageRoutingKeys } from './edit-event/edit-event-routing.keys';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: `:${TasksPageRoutingKeys.PARAM_ID}`,\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: TasksPage,\r\n        pathMatch: 'full',\r\n      },\r\n      {\r\n        path: `${EditTaskPageRoutingKeys.BASE}`,\r\n        loadChildren: () => import('./edit-task/edit-task.module').then((m) => m.EditTaskPageModule),\r\n      },\r\n      {\r\n        path: `${EditEventPageRoutingKeys.BASE}`,\r\n        loadChildren: () => import('./edit-event/edit-event.module').then((m) => m.EditEventPageModule),\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class TasksPageRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Subscription, from } from 'rxjs';\r\nimport { TaskFilterModel } from 'src/app/models/common/filter.model';\r\nimport { CommonTaskService } from 'src/app/services/common/task/task.service';\r\nimport { ActivatedRoute, Router, NavigationExtras } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { LoadingController, ModalController } from '@ionic/angular';\r\nimport { TasksPageRoutingKeys } from './tasks-routing.keys';\r\nimport { mergeMap, tap } from 'rxjs/operators';\r\nimport { Task } from 'src/app/models/common/task.model';\r\nimport { FilterTaskComponent } from './component/filter-task/filter-task.component';\r\nimport * as moment from 'moment';\r\nimport { Event } from 'src/app/models/common/event.model';\r\nimport { CommonEventService } from 'src/app/services/common/event/event.service';\r\n\r\n@Component({\r\n  selector: 'app-tasks',\r\n  templateUrl: './tasks.page.html',\r\n  styleUrls: ['./tasks.page.scss'],\r\n})\r\nexport class TasksPage implements OnInit {\r\n  private subs = new Subscription();\r\n  tasks: Task[];\r\n  events: Event[];\r\n  oppId: string;\r\n  filterObj: TaskFilterModel;\r\n  searchInput: string;\r\n  isListView = false;\r\n  currDate: string;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private taskSrvc: CommonTaskService,\r\n    private eventSrvc: CommonEventService,\r\n    private translate: TranslateService,\r\n    private loadingCtrl: LoadingController,\r\n    private modalCtrl: ModalController\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.subs.add(this.parseURL());\r\n  }\r\n\r\n  parseURL() {\r\n    return this.route.paramMap.subscribe((params) => {\r\n      this.oppId = params.get(TasksPageRoutingKeys.PARAM_ID);\r\n      if (this.oppId === TasksPageRoutingKeys.NEW) {\r\n        this.oppId = '';\r\n      }\r\n      this.getEventsAndTasks().then(() => {});\r\n    });\r\n  }\r\n\r\n  async getEventsAndTasks(filter?: TaskFilterModel) {\r\n    this.translate\r\n      .get('Common_Loading')\r\n      .pipe(\r\n        mergeMap((lang) => {\r\n          return from(\r\n            this.loadingCtrl.create({\r\n              message: lang,\r\n            })\r\n          );\r\n        }),\r\n        mergeMap((loading) => {\r\n          loading.present();\r\n          const startOfMonth = moment().startOf('month');\r\n          const endOfMonth = moment().endOf('month');\r\n          return this.taskSrvc.getTasks(startOfMonth, endOfMonth, this.searchInput, this.oppId).pipe(\r\n            tap((e) => {\r\n              this.tasks = e;\r\n            }),\r\n            mergeMap(() => {\r\n              return this.eventSrvc.getEvents(startOfMonth, endOfMonth, this.searchInput, this.oppId).pipe(\r\n                tap(\r\n                  (e) => {\r\n                    this.events = e;\r\n                    loading.dismiss();\r\n                  },\r\n                  (err) => {\r\n                    loading.dismiss();\r\n                  }\r\n                )\r\n              );\r\n            })\r\n          );\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  switchView() {\r\n    this.isListView = !this.isListView;\r\n  }\r\n\r\n  dateChanged(d: string) {\r\n    if (!d) {\r\n      return;\r\n    }\r\n\r\n    this.currDate = d;\r\n    this.getEventsAndTasks();\r\n  }\r\n\r\n  showFilter() {\r\n    from(\r\n      this.modalCtrl.create({\r\n        component: FilterTaskComponent,\r\n        backdropDismiss: false,\r\n        animated: true,\r\n        cssClass: 'full-screen',\r\n        componentProps: {\r\n          filterObj: this.filterObj ? Object.assign({}, this.filterObj) : null,\r\n        },\r\n      })\r\n    ).subscribe((modal) => {\r\n      from(modal.onDidDismiss()).subscribe((res: any) => {\r\n        if (res && res.data) {\r\n          this.filterObj = res.data;\r\n          this.getEventsAndTasks(this.filterObj);\r\n        }\r\n      });\r\n      modal.present();\r\n    });\r\n  }\r\n\r\n  search() {\r\n    this.getEventsAndTasks();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { TasksPageRoutingModule } from './tasks-routing.module';\r\n\r\nimport { TasksPage } from './tasks.page';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { FilterTaskComponent } from './component/filter-task/filter-task.component';\r\nimport { CalendarViewComponent } from './component/calendar/calendar.component';\r\nimport { ListViewComponent } from './component/list-view/list-view.component';\r\nimport { NgCalendarModule } from 'ionic2-calendar';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, IonicModule, ReactiveFormsModule, TranslateModule, NgCalendarModule, TasksPageRoutingModule],\r\n  declarations: [TasksPage, FilterTaskComponent, CalendarViewComponent, ListViewComponent],\r\n  entryComponents: [],\r\n})\r\nexport class TasksPageModule {}\r\n","export const EditTaskPageRoutingKeys = {\r\n  BASE: 'edit-task',\r\n  PARAM_ID: 'new',\r\n  STATE_OPPID: 'new',\r\n  NEW: 'new',\r\n};\r\n","export const EditEventPageRoutingKeys = {\r\n  BASE: 'edit-event',\r\n  PARAM_ID: 'new',\r\n  STATE_OPPID: 'new',\r\n  NEW: 'new',\r\n};\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { IEventApi } from 'src/app/interfaces/event-api.interface';\r\nimport { EVENT_SERVICE_KEY } from 'src/app/service-providers/dynamic-key.provider';\r\nimport { ErrorService } from '../error/error.service';\r\nimport { TASK_META_KEY } from 'src/app/service-providers/task-meta.provider';\r\nimport { TaskMeta } from 'src/app/models/common/task-meta.model';\r\nimport { Event } from 'src/app/models/common/event.model';\r\nimport { Moment } from 'moment';\r\nimport { TaskFilterModel } from 'src/app/models/common/filter.model';\r\nimport { Observable } from 'rxjs';\r\nimport { Task } from 'src/app/models/common/task.model';\r\nimport { SelectOption } from 'src/app/models/common/select-option.model';\r\nimport { EventMeta } from 'src/app/models/common/event-meta.model';\r\nimport { EVENT_META_KEY } from 'src/app/service-providers/event-meta.provider';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CommonEventService {\r\n  constructor(\r\n    @Inject(EVENT_SERVICE_KEY) private eventAPI: IEventApi,\r\n    @Inject(EVENT_META_KEY) private eventMetaParam: EventMeta,\r\n    private errorSrvc: ErrorService\r\n  ) {}\r\n\r\n  getEventsOffset(startD: Moment, endD: Moment, taskFilter: TaskFilterModel, search: string, oppId: string): Observable<Event[]> {\r\n    const id = oppId ? oppId : '';\r\n    try {\r\n      return this.eventAPI.getEventsOffset(startD, endD, taskFilter, search, id);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getEvents(startD: Moment, endD: Moment, search: string, oppId: string): Observable<Event[]> {\r\n    const id = oppId ? oppId : '';\r\n    try {\r\n      return this.eventAPI.getEvents(startD, endD, search, id);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getEventById(taskId: string): Observable<Event> {\r\n    try {\r\n      if (taskId && taskId.trim()) {\r\n        return this.eventAPI.getEventById(taskId);\r\n      }\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  upsertEvent(event: Event): Observable<Event> {\r\n    try {\r\n      return this.eventAPI.upsertEvent(event);\r\n    } catch (e) {\r\n      this.errorSrvc.presentServerErr(e);\r\n    }\r\n  }\r\n\r\n  getStatus(): SelectOption[] {\r\n    return this.eventMetaParam.status;\r\n  }\r\n\r\n  getAlertTypes(): SelectOption[] {\r\n    return this.eventMetaParam.alert;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}