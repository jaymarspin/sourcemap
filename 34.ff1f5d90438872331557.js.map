{"version":3,"sources":["./node_modules/rxjs/_esm2015/internal/operators/debounceTime.js","./src/app/pages/task/edit-task/edit-task.page.html","./src/app/pages/task/edit-task/edit-task-routing.module.ts","./src/app/pages/task/edit-task/edit-task.page.ts","./src/app/pages/task/edit-task/edit-task.module.ts"],"names":["DebounceTimeOperator","dueTime","scheduler","this","subscriber","source","subscribe","Subscriber","destination","super","debouncedSubscription","lastValue","hasValue","value","clearDebounce","add","schedule","dispatchNext","debouncedNext","complete","next","remove","unsubscribe","routes","path","PARAM_ID","children","component","EditTaskPage","route","translate","taskSrvc","formBuilder","navCtrl","router","loadingCtrl","modalCtrl","contactSrvc","subs","Subscription","showTDField","showLeadField","maxdate","Date","setFullYear","getFullYear","mindate","status","getStatus","alert","getAlertTypes","taskForm","initTaskForm","parseURL","task","paramMap","params","Id","get","e","pageTitle","getData","getCurrentNavigation","extras","state","states","OpportunityId","STATE_OPPID","console","log","group","id","taskName","required","contact","dueDate","allDay","notes","custAct","custInfo","custFeel","initSGValidation","initErrorMessages","form","lang","formErrorMessages","key","Object","keys","controls","pipe","mergeMap","from","create","message","loading","present","forkJoin","getTaskById","tap","setValues","dismiss","err","setValue","TaskName","Status","ContactName","DueDate","Alert","Notes","isComplete","upsertTask","back","componentProps","callbackFn","searchStr","searchByName","transformFn","Title","Name","Label","MobileNo","Note","noResultFn","backdropDismiss","modal","onDidDismiss","modalData","data","ContactId","PersonContactId","valueChanges","distinctUntilChanged","lift","debounceTime","val","toLowerCase","includes","setValidators","minLength","minlength","clearValidators","done","selectContact","pathMatch","EditTaskPageRoutingModule","forChild","EditTaskPageModule"],"mappings":"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","file":"34.ff1f5d90438872331557.js","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function debounceTime(dueTime, scheduler = async) {\n    return (source) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\nclass DebounceTimeOperator {\n    constructor(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    }\n}\nclass DebounceTimeSubscriber extends Subscriber {\n    constructor(destination, dueTime, scheduler) {\n        super(destination);\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n        this.debouncedSubscription = null;\n        this.lastValue = null;\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    }\n    _complete() {\n        this.debouncedNext();\n        this.destination.complete();\n    }\n    debouncedNext() {\n        this.clearDebounce();\n        if (this.hasValue) {\n            const { lastValue } = this;\n            this.lastValue = null;\n            this.hasValue = false;\n            this.destination.next(lastValue);\n        }\n    }\n    clearDebounce() {\n        const debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    }\n}\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map","<ion-header>\r\n  <ion-toolbar color=\"primary\" mode=\"ios\">\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"\" text=\"{{'Common_Back'|translate}}\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-buttons slot=\"end\">\r\n      <ion-button (click)=\"done()\" [disabled]=\"taskForm.invalid\">{{'Common_Done'|translate}}</ion-button>\r\n    </ion-buttons>\r\n    <ion-title>{{pageTitle}}</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n<ion-content>\r\n  <form [formGroup]=\"taskForm\">\r\n    <ion-item>\r\n      <ion-input formControlName=\"taskName\" placeholder='{{\"EditTaskPage_TaskName\"|translate}}'></ion-input>\r\n    </ion-item>\r\n    <app-item-err [control]=\"taskForm.controls?.taskName\" [messages]=\"formErrorMessages.taskName\"></app-item-err>\r\n    <ion-item>\r\n      <ion-select formControlName=\"status\" placeholder='{{\"EditTaskPage_Status\"|translate}}'>\r\n        <ion-select-option [value]=\"opt.value\" *ngFor=\"let opt of status\"> {{ opt.label }} </ion-select-option>\r\n      </ion-select>\r\n    </ion-item>\r\n    <app-item-err [control]=\"taskForm.controls?.status\" [messages]=\"formErrorMessages.status\"></app-item-err>\r\n    <ion-item>\r\n      <ion-input formControlName=\"contact\" placeholder='{{\"EditTaskPage_Contacts\"|translate}}' (click)=\"selectContact()\"></ion-input>\r\n    </ion-item>\r\n    <app-item-err [control]=\"taskForm.controls?.contact\" [messages]=\"formErrorMessages.contact\"></app-item-err>\r\n    <ion-item>\r\n      <ion-datetime\r\n        formControlName=\"dueDate\"\r\n        displayFormat=\"DD MMM YYYY\"\r\n        placeholder='{{\"EditTaskPage_EndDate\"|translate}}'\r\n        min=\"{{ mindate }}\"\r\n        max=\"{{ maxdate }}\"\r\n      >\r\n      </ion-datetime>\r\n    </ion-item>\r\n    <app-item-err [control]=\"taskForm.controls?.dueDate\" [messages]=\"formErrorMessages.dueDate\"></app-item-err>\r\n    <!-- <ion-item>\r\n        <ion-select formControlName=\"alert\" placeholder='{{\"EditTaskPage_Alert\"|translate}}'>\r\n          <ion-select-option [value]=\"opt.value\" *ngFor=\"let opt of alert\"> {{ opt.label }} </ion-select-option>\r\n        </ion-select>\r\n      </ion-item>\r\n      <app-item-err [control]=\"taskForm.controls?.alert\" [messages]=\"formErrorMessages.alert\"></app-item-err> -->\r\n    <ng-container *ngIf=\"showLeadField || showTDField\">\r\n      <ion-item lines=\"none\">\r\n        <ion-textarea formControlName=\"custAct\" autoGrow=\"true\" placeholder='{{\"EditTaskPage_CustAct\"|translate}}'></ion-textarea>\r\n      </ion-item>\r\n      <ion-item class=\"ion-no-margin ion-no-padding ion-text-end\">\r\n        <ion-note>Character count: {{taskForm.get('custAct').value?.length}}</ion-note>\r\n      </ion-item>\r\n      <app-item-err [control]=\"taskForm.controls?.custAct\" [messages]=\"formErrorMessages.custAct\"></app-item-err>\r\n\r\n      <ion-item *ngIf=\"showLeadField\" lines=\"none\">\r\n        <ion-textarea formControlName=\"custInfo\" autoGrow=\"true\" placeholder='{{\"EditTaskPage_CustInfo\"|translate}}'></ion-textarea>\r\n      </ion-item>\r\n      <ion-item *ngIf=\"showLeadField\" class=\"ion-no-margin ion-no-padding ion-text-end\">\r\n        <ion-note>Character count: {{taskForm.get('custInfo').value?.length}}</ion-note>\r\n      </ion-item>\r\n      <app-item-err *ngIf=\"showLeadField\" [control]=\"taskForm.controls?.custInfo\" [messages]=\"formErrorMessages.custInfo\"></app-item-err>\r\n\r\n      <ion-item *ngIf=\"showTDField\" lines=\"none\">\r\n        <ion-textarea formControlName=\"custFeel\" autoGrow=\"true\" placeholder='{{\"EditTaskPage_CustFeel\"|translate}}'></ion-textarea>\r\n      </ion-item>\r\n      <ion-item *ngIf=\"showTDField\" class=\"ion-no-margin ion-no-padding ion-text-end\">\r\n        <ion-note>Character count: {{taskForm.get('custFeel').value?.length}}</ion-note>\r\n      </ion-item>\r\n      <app-item-err *ngIf=\"showTDField\" [control]=\"taskForm.controls?.custFeel\" [messages]=\"formErrorMessages.custFeel\"></app-item-err>\r\n    </ng-container>\r\n    <ion-item>\r\n      <ion-textarea rows=\"6\" formControlName=\"notes\" placeholder='{{\"EditTaskPage_Notes\"|translate}}'></ion-textarea>\r\n    </ion-item>\r\n    <app-item-err [control]=\"taskForm.controls?.notes\" [messages]=\"formErrorMessages.notes\"></app-item-err>\r\n  </form>\r\n</ion-content>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { EditTaskPage } from './edit-task.page';\r\nimport { EditTaskPageRoutingKeys } from './edit-task-routing.keys';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: `:${EditTaskPageRoutingKeys.PARAM_ID}`,\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: EditTaskPage,\r\n        pathMatch: 'full',\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class EditTaskPageRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { LoadingController, ModalController, NavController } from '@ionic/angular';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { forkJoin, from, Subscription } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, mergeMap, tap } from 'rxjs/operators';\r\nimport { AutocompleteComponent } from 'src/app/components/common/autocomplete/autocomplete.component';\r\nimport { AutoCompleteModel } from 'src/app/models/common/auto-complete.model';\r\nimport { ContactModel } from 'src/app/models/common/contact.model';\r\nimport { FormErrorMessages } from 'src/app/models/common/form-error.model';\r\nimport { Task } from 'src/app/models/common/task.model';\r\nimport { CommonContactService } from 'src/app/services/common/contact/contact.service';\r\nimport { CommonTaskService } from 'src/app/services/common/task/task.service';\r\nimport { EditTaskPageRoutingKeys } from './edit-task-routing.keys';\r\n\r\n@Component({\r\n  selector: 'app-edit-task',\r\n  templateUrl: './edit-task.page.html',\r\n  styleUrls: ['./edit-task.page.scss'],\r\n})\r\nexport class EditTaskPage implements OnInit {\r\n  pageTitle: string;\r\n  private subs = new Subscription();\r\n  task: Task;\r\n  states: object;\r\n  taskForm: FormGroup;\r\n  formErrorMessages: FormErrorMessages;\r\n  showTDField = false;\r\n  showLeadField = false;\r\n  maxdate = new Date(new Date().setFullYear(new Date().getFullYear() + 5)).getFullYear();\r\n  mindate = new Date(new Date().setFullYear(new Date().getFullYear() - 5)).getFullYear();\r\n  status = this.taskSrvc.getStatus();\r\n  alert = this.taskSrvc.getAlertTypes();\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private translate: TranslateService,\r\n    private taskSrvc: CommonTaskService,\r\n    private formBuilder: FormBuilder,\r\n    private navCtrl: NavController,\r\n    private router: Router,\r\n    private loadingCtrl: LoadingController,\r\n    private modalCtrl: ModalController,\r\n    private contactSrvc: CommonContactService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.taskForm = this.initTaskForm();\r\n    this.subs.add(this.parseURL());\r\n  }\r\n\r\n  parseURL() {\r\n    this.task = new Task();\r\n    return this.route.paramMap.subscribe((params) => {\r\n      this.task.Id = params.get(EditTaskPageRoutingKeys.PARAM_ID);\r\n      if (this.task.Id === EditTaskPageRoutingKeys.PARAM_ID) {\r\n        this.translate.get('EditTaskPage_NewTask').subscribe((e) => {\r\n          this.pageTitle = e;\r\n          this.task.Id = null;\r\n        });\r\n      } else {\r\n        this.translate.get('EditTaskPage_EditTask').subscribe((e) => {\r\n          this.pageTitle = e;\r\n          this.getData();\r\n        });\r\n      }\r\n      if (this.router.getCurrentNavigation().extras.state) {\r\n        this.states = this.router.getCurrentNavigation().extras.state;\r\n        this.task.OpportunityId = this.states[EditTaskPageRoutingKeys.STATE_OPPID];\r\n        console.log(this.task.OpportunityId);\r\n      }\r\n    });\r\n  }\r\n\r\n  private initTaskForm(): FormGroup {\r\n    const taskForm = this.formBuilder.group({\r\n      id: [''],\r\n      taskName: ['', [Validators.required]],\r\n      status: ['', [Validators.required]],\r\n      contact: ['', [Validators.required]],\r\n      dueDate: ['', [Validators.required]],\r\n      allDay: [false],\r\n      alert: [''],\r\n      notes: [''],\r\n      custAct: [''],\r\n      custInfo: [''],\r\n      custFeel: [''],\r\n    });\r\n    this.initSGValidation(taskForm);\r\n    this.initErrorMessages(taskForm);\r\n    return taskForm;\r\n  }\r\n\r\n  private initErrorMessages(form: FormGroup) {\r\n    this.translate.get('Error_CannotBeEmpty').subscribe((lang) => {\r\n      this.formErrorMessages = {\r\n        group: {},\r\n      };\r\n      if (!form) {\r\n        return;\r\n      }\r\n      for (const key of Object.keys(form.controls)) {\r\n        switch (key) {\r\n          case 'taskName':\r\n          case 'status':\r\n          case 'contact':\r\n          case 'endDate':\r\n            this.formErrorMessages[key] = {\r\n              required: lang,\r\n            };\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  getData() {\r\n    this.translate\r\n      .get('Common_Loading')\r\n      .pipe(\r\n        mergeMap((lang) => {\r\n          return from(\r\n            this.loadingCtrl.create({\r\n              message: lang,\r\n            })\r\n          );\r\n        }),\r\n        mergeMap((loading) => {\r\n          loading.present();\r\n          return forkJoin([\r\n            this.taskSrvc.getTaskById(this.task.Id).pipe(\r\n              tap((task) => {\r\n                this.task = task;\r\n                this.setValues();\r\n              })\r\n            ),\r\n          ]).pipe(\r\n            tap(\r\n              (e) => {\r\n                loading.dismiss();\r\n              },\r\n              (err) => {\r\n                loading.dismiss();\r\n              }\r\n            )\r\n          );\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  setValues() {\r\n    this.taskForm.get('id').setValue(this.task.Id);\r\n    this.taskForm.get('taskName').setValue(this.task.TaskName);\r\n    this.taskForm.get('status').setValue(this.task.Status);\r\n    this.taskForm.get('contact').setValue(this.task.ContactName);\r\n    this.taskForm.get('dueDate').setValue(this.task.DueDate);\r\n    this.taskForm.get('alert').setValue(this.task.Alert);\r\n    this.taskForm.get('notes').setValue(this.task.Notes);\r\n  }\r\n\r\n  done() {\r\n    this.task.TaskName = this.taskForm.get('taskName').value;\r\n    this.task.Status = this.taskForm.get('status').value;\r\n    this.task.ContactName = this.taskForm.get('contact').value;\r\n    // this.task.StartDate = this.taskForm.get('startDate').value;\r\n    this.task.DueDate = this.taskForm.get('dueDate').value;\r\n    this.task.Alert = this.taskForm.get('alert').value;\r\n    this.task.Notes = this.taskForm.get('notes').value;\r\n    this.task.isComplete = this.task?.Status === 'Open' ? false : true;\r\n    this.translate\r\n      .get('Common_Saving')\r\n      .pipe(\r\n        mergeMap((lang) => {\r\n          return from(\r\n            this.loadingCtrl.create({\r\n              message: lang,\r\n            })\r\n          );\r\n        }),\r\n        mergeMap((loading) => {\r\n          loading.present();\r\n          return this.taskSrvc.upsertTask(this.task).pipe(\r\n            tap(\r\n              (e) => {\r\n                console.log(e);\r\n                loading.dismiss();\r\n                this.navCtrl.back();\r\n              },\r\n              (err) => {\r\n                loading.dismiss();\r\n              }\r\n            )\r\n          );\r\n        })\r\n      )\r\n      .subscribe((e) => {\r\n        this.navCtrl.back();\r\n      });\r\n  }\r\n\r\n  selectContact() {\r\n    from(\r\n      this.modalCtrl.create({\r\n        component: AutocompleteComponent,\r\n        componentProps: {\r\n          callbackFn: (searchStr: string) => {\r\n            return this.contactSrvc.searchByName(searchStr);\r\n          },\r\n          transformFn: (contact: ContactModel) => {\r\n            return new AutoCompleteModel({\r\n              Title: contact.Name,\r\n              Label: `(${contact.MobileNo})`,\r\n              Note: contact.Id,\r\n            });\r\n          },\r\n          noResultFn: (searchStr: string) => {},\r\n          backdropDismiss: false,\r\n        },\r\n      })\r\n    ).subscribe((modal) => {\r\n      from(modal.onDidDismiss()).subscribe((modalData) => {\r\n        if (modalData && modalData.data) {\r\n          console.log(modalData.data);\r\n          this.task.ContactId = modalData.data.PersonContactId;\r\n          this.task.ContactName = modalData.data.Name;\r\n          this.taskForm.get('contact').setValue(modalData.data.Name);\r\n        }\r\n      });\r\n      modal.present();\r\n    });\r\n  }\r\n\r\n  private initSGValidation(form: FormGroup) {\r\n    const tdFollowUp = 'follow up after test drive';\r\n    const leadFollowUp = 'you have a new lead';\r\n    form\r\n      .get('taskName')\r\n      .valueChanges.pipe(distinctUntilChanged(), debounceTime(800))\r\n      .subscribe((val) => {\r\n        this.showTDField = val.toLowerCase().includes(tdFollowUp);\r\n        this.showLeadField = val.toLowerCase().includes(leadFollowUp);\r\n        if (this.showTDField || this.showLeadField) {\r\n          this.taskForm.controls['custAct'].setValidators([Validators.required, Validators.minLength(40)]);\r\n          this.formErrorMessages['custAct'] = {\r\n            required: 'Minimum 40 Characters',\r\n            minlength: 'Minimum 40 Characters',\r\n          };\r\n        }\r\n        if (this.showTDField) {\r\n          this.taskForm.controls['custFeel'].setValidators([Validators.required, Validators.minLength(40)]);\r\n          this.formErrorMessages['custFeel'] = {\r\n            required: 'Minimum 40 Characters',\r\n            minlength: 'Minimum 40 Characters',\r\n          };\r\n        }\r\n        if (this.showLeadField) {\r\n          this.taskForm.controls['custInfo'].setValidators([Validators.required, Validators.minLength(40)]);\r\n          this.formErrorMessages['custInfo'] = {\r\n            required: 'Minimum 40 Characters',\r\n            minlength: 'Minimum 40 Characters',\r\n          };\r\n        }\r\n        if (!this.showLeadField && !this.showTDField) {\r\n          this.taskForm.controls['custAct'].clearValidators();\r\n          this.taskForm.controls['custFeel'].clearValidators();\r\n        }\r\n      });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { EditTaskPageRoutingModule } from './edit-task-routing.module';\r\n\r\nimport { EditTaskPage } from './edit-task.page';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ItemErrComponentModule } from 'src/app/components/common/item-err/item-err.module';\r\nimport { AutocompleteComponentModule } from 'src/app/components/common/autocomplete/autocomplete.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ReactiveFormsModule,\r\n    TranslateModule,\r\n    EditTaskPageRoutingModule,\r\n    ItemErrComponentModule,\r\n    AutocompleteComponentModule,\r\n  ],\r\n  declarations: [EditTaskPage],\r\n})\r\nexport class EditTaskPageModule {}\r\n"],"sourceRoot":"webpack:///"}