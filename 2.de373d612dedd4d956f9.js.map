{"version":3,"sources":["./src/app/pages/contact/contact-list/contact-list.page.html","./src/app/pages/contact/contact-list/contact-list-routing.module.ts","./src/app/pages/contact/contact-list/contact-list.page.ts","./src/app/pages/contact/contact-list/contact-list.module.ts"],"names":["routes","path","component","ContactListPage","contact","navCtrl","router","loadingCtrl","translate","letters","this","getLetterScroll","contacts","isLoadingRecent","countryCode","environment","offset","sub","Subscription","getRecentContacts","add","subRecentContacts","subscribe","recentList","recentContacts","unsubscribe","obsList","length","push","getContacts","forkJoin","res","err","get","pipe","mergeMap","lang","from","create","message","loading","present","getCategorizedContact","tap","e","dismiss","of","Array","item","Flag","event","searchInput","trim","origLen","target","complete","disabled","navigateForward","BASE","Id","letter","document","getElementById","console","log","myContent","scrollToPoint","offsetTop","navigate","OPPID","search","loadData","ContactListPageRoutingModule","forChild","ContactListPageModule"],"mappings":"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","file":"2.de373d612dedd4d956f9.js","sourcesContent":["<ion-header class=\"ion-no-border\">\r\n  <ion-toolbar color=\"primary\" mode=\"ios\">\r\n    <ion-buttons slot=\"end\">\r\n      <ion-button (click)=\"add()\">\r\n        <ion-icon slot=\"icon-only\" name=\"add\"></ion-icon>\r\n      </ion-button>\r\n    </ion-buttons>\r\n    <ion-title> {{\"ContactsTab_Contacts\"|translate}} </ion-title>\r\n  </ion-toolbar>\r\n  <ion-toolbar>\r\n    <ion-searchbar\r\n      class=\"ion-margin-top\"\r\n      search-icon=\"\"\r\n      debounce=\"500\"\r\n      [(ngModel)]=\"searchInput\"\r\n      placeholder=\"{{'ContactsTab_Search'|translate}}\"\r\n      (ionChange)=\"search()\"\r\n      (ionCancel)=\"getRecentContacts()\"\r\n      (ionClear)=\"getRecentContacts()\"\r\n    >\r\n    </ion-searchbar>\r\n  </ion-toolbar>\r\n</ion-header>\r\n<ion-content>\r\n  <ion-grid>\r\n    <ng-container *ngIf=\"countryCode == 'my'\">\r\n      <ion-row class=\"letter-scroll\" *ngFor=\"let item of letters; let i = index\" (click)=\"getLetterClicked(item)\">\r\n        <ion-col size=\"12\">\r\n          <ion-label class=\"mat-small\" color=\"primary\"> {{item}} </ion-label>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ng-container>\r\n    <ion-item *ngIf=\"isLoadingRecent\" class=\"ion-text-center\" lines=\"none\">\r\n      <ion-label class=\"ion-text-center\">\r\n        <ion-spinner></ion-spinner>\r\n      </ion-label>\r\n    </ion-item>\r\n    <ion-row *ngIf=\"!searchInput && recentContacts\">\r\n      <ion-col size=\"12\">\r\n        <ion-list *ngIf=\"recentContacts?.length > 0\">\r\n          <ion-item-group>\r\n            <ion-item-divider color=\"primary-50\">\r\n              <ion-label>\r\n                <b>{{\"ContactsTab_RecentlyAdded\"|translate}}</b>\r\n              </ion-label>\r\n            </ion-item-divider>\r\n            <ion-item-sliding *ngFor=\"let item of recentContacts\">\r\n              <ion-item tappable (click)=\"viewContact(item)\">\r\n                <ion-grid class=\"ion-no-padding ion-no-margin\">\r\n                  <ion-row class=\"row\">\r\n                    <ion-col class=\"ion-align-self-center\" size=\"10\">\r\n                      <ion-label color=\"primary\" class=\"name\"> {{ item?.Name }} </ion-label>\r\n                      <ion-note class=\"note\">{{item?.CompanyName}}</ion-note>\r\n                    </ion-col>\r\n                    <ion-col size=\"2\" class=\"ion-align-self-center\" *ngIf=\"countryCode == 'my'\">\r\n                      <ion-icon class=\"big-icon\" name=\"{{ getFavIcon(item) }}\" color=\"primary\"></ion-icon>\r\n                    </ion-col>\r\n                  </ion-row>\r\n                </ion-grid>\r\n              </ion-item>\r\n              <ion-item-options side=\"end\">\r\n                <ion-item-option (click)=\"edit(item)\" color=\"tertiary\">\r\n                  <ion-icon slot=\"icon-only\" name=\"create\"></ion-icon>\r\n                </ion-item-option>\r\n                <ion-item-option (click)=\"delete(item)\" color=\"danger\">\r\n                  <ion-icon slot=\"icon-only\" name=\"trash\"></ion-icon>\r\n                </ion-item-option>\r\n              </ion-item-options>\r\n            </ion-item-sliding>\r\n          </ion-item-group>\r\n        </ion-list>\r\n      </ion-col>\r\n    </ion-row>\r\n    <ion-row *ngIf=\"showContactList()\">\r\n      <ion-col size=\"12\">\r\n        <ion-list>\r\n          <ion-item-group *ngFor=\"let item of contacts\" id=\"{{ item?.header }}\">\r\n            <ion-item-divider color=\"primary-50\">\r\n              <ion-label><b>{{ item?.header }}</b></ion-label>\r\n            </ion-item-divider>\r\n            <ion-item-sliding *ngFor=\"let contact of item?.contacts\">\r\n              <ion-item tappable (click)=\"viewContact(contact)\">\r\n                <ion-grid class=\"ion-no-padding ion-no-margin\">\r\n                  <ion-row>\r\n                    <ion-col class=\"ion-align-self-center ion-text-wrap\" size=\"10\">\r\n                      <ion-label color=\"primary\" class=\"name\"> {{ contact?.Name }} </ion-label>\r\n                      <ion-note class=\"note\">{{ contact?.CompanyName }}</ion-note>\r\n                    </ion-col>\r\n                    <ion-col size=\"2\" class=\"ion-align-self-center\" *ngIf=\"countryCode == 'my'\">\r\n                      <ion-icon class=\"big-icon\" name=\"{{ getFavIcon(contact) }}\" color=\"primary\"></ion-icon>\r\n                    </ion-col>\r\n                  </ion-row>\r\n                </ion-grid>\r\n              </ion-item>\r\n              <ion-item-options side=\"end\">\r\n                <ion-item-option (click)=\"edit(contact)\" color=\"tertiary\">\r\n                  <ion-icon slot=\"icon-only\" name=\"create\"></ion-icon>\r\n                </ion-item-option>\r\n                <ion-item-option (click)=\"delete(contact)\" color=\"danger\">\r\n                  <ion-icon slot=\"icon-only\" name=\"trash\"></ion-icon>\r\n                </ion-item-option>\r\n              </ion-item-options>\r\n            </ion-item-sliding>\r\n          </ion-item-group>\r\n        </ion-list>\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid>\r\n\r\n  <ion-infinite-scroll threshold=\"100px\" (ionInfinite)=\"loadData($event)\">\r\n    <ion-infinite-scroll-content loadingSpinner=\"bubbles\" loadingText='{{\"ContactsTab_LoadingMoreContacts\"|translate}}'></ion-infinite-scroll-content>\r\n  </ion-infinite-scroll>\r\n</ion-content>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ContactListPage } from './contact-list.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ContactListPage,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ContactListPageRoutingModule {}\r\n","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { IonContent, IonInfiniteScroll, LoadingController, NavController } from '@ionic/angular';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { forkJoin, from, of, Subscription } from 'rxjs';\r\nimport { mergeMap, tap } from 'rxjs/operators';\r\nimport { CategorizedContact, ContactModel } from 'src/app/models/common/contact.model';\r\nimport { CommonContactService } from 'src/app/services/common/contact/contact.service';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ViewContactPageRoutingKeys } from '../../contact/view-contact/view-contact-routing.keys';\r\nimport { NewLeadsRoutingKeys } from '../../new-leads/new-leads-routing.keys';\r\n\r\n@Component({\r\n  selector: 'app-contact-list',\r\n  templateUrl: './contact-list.page.html',\r\n  styleUrls: ['./contact-list.page.scss'],\r\n})\r\nexport class ContactListPage implements OnInit, OnDestroy {\r\n  letters = this.contact.getLetterScroll();\r\n  contacts: CategorizedContact[] = [];\r\n  recentContacts: ContactModel[];\r\n  searchInput: string;\r\n  isLoadingRecent = false;\r\n  @ViewChild(IonContent, { read: IonContent }) myContent: IonContent;\r\n  @ViewChild(IonInfiniteScroll) infiniteScroll: IonInfiniteScroll;\r\n  countryCode = environment.countryCode;\r\n  offset = 0;\r\n\r\n  private sub = new Subscription();\r\n\r\n  constructor(\r\n    private contact: CommonContactService,\r\n    private navCtrl: NavController,\r\n    private router: Router,\r\n    private loadingCtrl: LoadingController,\r\n    private translate: TranslateService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.getRecentContacts();\r\n    this.sub.add(\r\n      this.contact.subRecentContacts().subscribe((recentList) => {\r\n        this.recentContacts = recentList;\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n  }\r\n\r\n  getRecentContacts() {\r\n    this.isLoadingRecent = true;\r\n    const obsList = [];\r\n    if (!this.recentContacts || this.recentContacts.length <= 0) {\r\n      obsList.push(this.contact.getRecentContacts());\r\n    }\r\n    if (environment.countryCode === 'my') {\r\n      obsList.push(this.getContacts());\r\n    }\r\n    if (obsList.length > 0) {\r\n      forkJoin(obsList).subscribe(\r\n        (res) => {\r\n          this.isLoadingRecent = false;\r\n        },\r\n        (err) => {\r\n          this.isLoadingRecent = false;\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  getContacts() {\r\n    if (this.countryCode === 'my') {\r\n      this.contacts = [];\r\n      return this.translate.get('Common_Loading').pipe(\r\n        mergeMap((lang) => {\r\n          return from(\r\n            this.loadingCtrl.create({\r\n              message: lang,\r\n            })\r\n          );\r\n        }),\r\n        mergeMap((loading) => {\r\n          loading.present();\r\n          return this.contact.getCategorizedContact().pipe(\r\n            tap(\r\n              (e) => {\r\n                this.contacts = e;\r\n                loading.dismiss();\r\n              },\r\n              (err) => {\r\n                loading.dismiss();\r\n              }\r\n            )\r\n          );\r\n        })\r\n      );\r\n    } else {\r\n      return of(new Array<CategorizedContact>());\r\n    }\r\n  }\r\n\r\n  getFavIcon(item: ContactModel) {\r\n    if (item.Flag) {\r\n      return 'heart';\r\n    } else {\r\n      return 'heart-outline';\r\n    }\r\n  }\r\n\r\n  loadData(event) {\r\n    this.searchInput = this.searchInput && this.searchInput.trim() ? this.searchInput : null;\r\n    this.contact.getCategorizedContact(this.searchInput).subscribe((contacts) => {\r\n      const origLen = this.contacts.length;\r\n      this.contacts = contacts;\r\n      if (origLen != contacts.length) {\r\n        event.target.complete();\r\n      } else {\r\n        event.target.disabled = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  edit(contact: ContactModel) {} // TODO\r\n\r\n  delete(contact: ContactModel) {} // TODO\r\n\r\n  search() {\r\n    if (this.searchInput && this.searchInput.trim()) {\r\n      this.contact.getCategorizedContact(this.searchInput).subscribe((e) => {\r\n        this.contacts = e;\r\n      });\r\n    } else {\r\n      this.getRecentContacts();\r\n    }\r\n  }\r\n\r\n  viewContact(item: ContactModel) {\r\n    this.navCtrl.navigateForward(ViewContactPageRoutingKeys.BASE + '/' + item.Id);\r\n  }\r\n\r\n  getLetterClicked(letter: string) {\r\n    const target = document.getElementById(letter);\r\n    console.log(letter);\r\n    if (document.getElementById(letter)) {\r\n      this.myContent.scrollToPoint(0, target.offsetTop - 40, 1000);\r\n    }\r\n  }\r\n\r\n  add() {\r\n    this.router.navigate([`${NewLeadsRoutingKeys.BASE}/${NewLeadsRoutingKeys.OPPID}`]);\r\n  }\r\n\r\n  showContactList() {\r\n    return this.searchInput || environment.countryCode === 'my';\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ContactListPageRoutingModule } from './contact-list-routing.module';\r\nimport { ContactListPage } from './contact-list.page';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, TranslateModule, IonicModule, ContactListPageRoutingModule],\r\n  declarations: [ContactListPage],\r\n})\r\nexport class ContactListPageModule {}\r\n"],"sourceRoot":"webpack:///"}