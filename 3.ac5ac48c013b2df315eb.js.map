{"version":3,"sources":["./src/app/pages/testdrive/hometestdrives/filter-testdrive/filter-testdrive/filter-testdrive.component.ts","./src/app/pages/testdrive/hometestdrives/filter-testdrive/filter-testdrive/filter-testdrive.component.html","./src/app/pages/testdrive/hometestdrives/hometestdrives.page.html","./src/app/pages/testdrive/hometestdrives/hometestdrives-routing.module.ts","./src/app/pages/testdrive/hometestdrives/hometestdrives.page.ts","./src/app/pages/testdrive/hometestdrives/hometestdrives.module.ts"],"names":["FilterTestdriveComponent","modalCtrl","this","filterObj","reset","tdStatus","dismiss","type","cancel","updateTdStatus","apply","routes","path","OPP_PARAM_ID","children","component","HometestdrivesPage","route","router","testdriveSrvc","translate","loadingCtrl","auth","opportunityService","subs","Subscription","countryCode","environment","segment","subUser","subscribe","user","console","log","add","parseURL","paramMap","params","oppId","get","getTestdrives","filter","pipe","mergeMap","lang","from","create","message","loading","present","tap","e","mytestdrives","testdrives","err","ev","item","navigate","BASE","Id","veh","checkStatus","Status","vehStatus","backdropDismiss","animated","cssClass","componentProps","Object","assign","modal","onDidDismiss","res","data","cmp","team","selectedValues","singleSelect","modalData","map","model","label","pathMatch","HometestdrivesPageRoutingModule","forChild","HometestdrivesPageModule"],"mappings":"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","file":"3.ac5ac48c013b2df315eb.js","sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\r\nimport { TdFilterModel } from 'src/app/models/common/filter.model';\r\nimport { ModalController } from '@ionic/angular';\r\n\r\n@Component({\r\n  selector: 'app-filter-testdrive',\r\n  templateUrl: './filter-testdrive.component.html',\r\n  styleUrls: ['./filter-testdrive.component.scss'],\r\n})\r\nexport class FilterTestdriveComponent implements OnInit {\r\n  @Input() filterObj: TdFilterModel;\r\n\r\n  constructor(private modalCtrl: ModalController) {}\r\n\r\n  ngOnInit() {\r\n    if (!this.filterObj) {\r\n      this.reset();\r\n    }\r\n  }\r\n\r\n  getData() {}\r\n\r\n  reset() {\r\n    this.filterObj = {\r\n      tdStatus: 'all',\r\n    };\r\n  }\r\n\r\n  apply() {\r\n    this.modalCtrl.dismiss(this.filterObj);\r\n  }\r\n\r\n  cancel() {\r\n    this.modalCtrl.dismiss();\r\n  }\r\n\r\n  getUpcomingIcon() {\r\n    if (this.filterObj.tdStatus === 'upcoming') {\r\n      return 'assets/icon/opportunity/upcoming.svg';\r\n    } else {\r\n      return 'assets/icon/opportunity/upcoming-disabled.svg';\r\n    }\r\n  }\r\n\r\n  updateTdStatus(type: string) {\r\n    if (type === 'ongoing') {\r\n      this.filterObj.tdStatus = 'ongoing';\r\n    } else if (type === 'upcoming') {\r\n      this.filterObj.tdStatus = 'upcoming';\r\n    } else if (type === 'all') {\r\n      this.filterObj.tdStatus = 'all';\r\n    } else {\r\n      this.filterObj.tdStatus = 'completed';\r\n    }\r\n  }\r\n}\r\n","<ion-header class=\"ion-no-border\">\r\n  <ion-toolbar color=\"primary\" mode=\"ios\">\r\n    <ion-buttons slot=\"start\">\r\n      <ion-button (click)=\"cancel()\">\r\n        <ion-icon slot=\"icon-only\" name=\"arrow-back\"></ion-icon>\r\n      </ion-button>\r\n    </ion-buttons>\r\n    <ion-buttons slot=\"end\">\r\n      <ion-button (click)=\"reset()\">\r\n        {{ 'TestdriveFilter_Reset' | translate }}\r\n      </ion-button>\r\n    </ion-buttons>\r\n    <ion-title>{{ 'TestdriveFilter_Filter' | translate }}</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n<ion-content>\r\n  <div class=\"ion-padding\">\r\n    <ion-grid class=\"ion-no-margin ion-no-padding\">\r\n      <ion-row>\r\n        <ion-col size=\"12\">\r\n          <ion-label>\r\n            {{ 'TestdriveFilter_TestDriveStatus' | translate }}\r\n          </ion-label>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row class=\"ion-text-center ion-padding-top\">\r\n        <ion-col class=\"header-btn\" (click)=\"updateTdStatus('all')\" [class.activated]=\"filterObj.tdStatus === 'all'\">\r\n          <ion-icon name=\"apps\" [color]=\"filterObj.tdStatus === 'all' ? 'primary' : 'medium'\"></ion-icon>\r\n\r\n          <ion-label class=\"mat-small\">\r\n            {{ 'TestdriveFilter_All' | translate }}\r\n          </ion-label>\r\n        </ion-col>\r\n        <ion-col class=\"header-btn\" (click)=\"updateTdStatus('ongoing')\" [class.activated]=\"filterObj.tdStatus === 'ongoing'\">\r\n          <ion-icon name=\"play\" [color]=\"filterObj.tdStatus === 'ongoing' ? 'primary' : 'medium'\"></ion-icon>\r\n\r\n          <ion-label class=\"mat-small\">\r\n            {{ 'TestdriveFilter_Ongoing' | translate }}\r\n          </ion-label>\r\n        </ion-col>\r\n        <ion-col class=\"header-btn\" (click)=\"updateTdStatus('completed')\" [class.activated]=\"filterObj.tdStatus === 'completed'\">\r\n          <ion-icon name=\"checkmark\" [color]=\"filterObj.tdStatus === 'completed' ? 'primary' : 'medium'\"></ion-icon>\r\n\r\n          <ion-label class=\"mat-small\">\r\n            {{ 'TestdriveFilter_Completed' | translate }}\r\n          </ion-label>\r\n        </ion-col>\r\n        <ion-col class=\"header-btn\" (click)=\"updateTdStatus('upcoming')\" [class.activated]=\"filterObj.tdStatus === 'upcoming'\">\r\n          <ion-icon src=\"{{ getUpcomingIcon() }}\"></ion-icon>\r\n\r\n          <ion-label class=\"mat-small\">\r\n            {{ 'TestdriveFilter_Upcoming' | translate }}\r\n          </ion-label>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </div>\r\n</ion-content>\r\n<ion-footer class=\"ion-padding\">\r\n  <ion-button fill=\"solid\" expand=\"block\" color=\"primary\" (click)=\"apply()\">\r\n    {{ 'Common_Apply' | translate }}\r\n  </ion-button>\r\n</ion-footer>\r\n","<ion-header class=\"ion-no-border\">\r\n  <ion-toolbar color=\"primary\" mode=\"ios\">\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"\" text=\"{{'Common_Back'|translate}}\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-buttons slot=\"end\" *ngIf=\"oppId === 'mytestdrive' && segment === 'alltestdrive'\">\r\n      <ion-button (click)=\"showModelInterestComp()\">\r\n        <ion-icon slot=\"icon-only\" name=\"funnel\"></ion-icon>\r\n      </ion-button>\r\n    </ion-buttons>\r\n    <ion-title>\r\n      {{\"TestdrivePage_Testdrives\"|translate}}<br />\r\n      <ion-text *ngIf=\"oppId && countryCode === 'my'\" class=\"sub-header\"> {{\"TestdrivePage_OpportunityID\"|translate}}: {{oppId}} </ion-text>\r\n    </ion-title>\r\n  </ion-toolbar>\r\n\r\n  <ion-toolbar mode=\"ios\" *ngIf=\"oppId === 'mytestdrive' || oppId === 'all'\">\r\n    <ion-segment mode=\"ios\" [(ngModel)]=\"segment\" (ionChange)=\"segmentChanged($event)\" class=\"ion-no-margin\">\r\n      <ion-segment-button value=\"mytestdrive\">\r\n        <ion-label> {{\"Testdrive_MyTestDrive\"|translate}} </ion-label>\r\n      </ion-segment-button>\r\n      <ion-segment-button value=\"alltestdrive\">\r\n        <ion-label> {{\"Testdrive_AllTestDrive\"|translate}} </ion-label>\r\n      </ion-segment-button>\r\n    </ion-segment>\r\n  </ion-toolbar>\r\n</ion-header>\r\n<ion-content class=\"ion-padding-start ion-padding-end ion-padding-bottom\">\r\n  <ng-container *ngIf=\"segment === 'mytestdrive'\">\r\n    <ion-grid class=\"ion-margin-top ion-margin-bottom border-radius bg-white\" *ngFor=\"let td of mytestdrives\">\r\n      <ion-row class=\"ion-no-margin\">\r\n        <ion-col>\r\n          <ion-label color=\"{{getColor(td?.Vehicle)}}\">\r\n            <b>{{td?.Vehicle?.Status}}</b>\r\n          </ion-label>\r\n\r\n          <ion-icon class=\"bottom-icon\" src=\"{{ getIcon(td?.Vehicle) }}\"></ion-icon>\r\n        </ion-col>\r\n        <ion-col class=\"ion-text-start\">\r\n          <ion-label color=\"{{getColor(td?.Vehicle)}}\">{{ td?.ContactName }}</ion-label>\r\n          <ion-label color=\"{{getColor(td?.Vehicle)}}\">{{ td?.Vehicle?.RegNum }}</ion-label>\r\n          <ion-label color=\"{{getColor(td?.Vehicle)}}\">\r\n            <b>{{td?.Vehicle?.Name}}</b>\r\n          </ion-label>\r\n          <ion-label color=\"{{getColor(td?.Vehicle)}}\">{{ td?.ExpiryDate | date: \"dd MMM y\" }}</ion-label>\r\n          <ion-label color=\"{{getColor(td?.Vehicle)}}\"> {{ td?.PlannedStartDate | date: \"dd MMM y hh:mm a\" }} </ion-label>\r\n          <ion-label>\r\n            <a (click)=\"goToTestdrive(td)\"> {{\"OpportunityTab_ViewDetails\"|translate}} </a>\r\n          </ion-label>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"segment === 'alltestdrive'\">\r\n    <ion-grid class=\"ion-margin-top ion-margin-bottom border-radius bg-white\" *ngFor=\"let td of testdrives\">\r\n      <ion-row class=\"ion-no-margin\">\r\n        <ion-col>\r\n          <ion-label color=\"{{getColor(td?.Vehicle)}}\">\r\n            <b>{{td?.Vehicle?.Status}}</b>\r\n          </ion-label>\r\n          <ion-label color=\"{{getColor(td?.Vehicle)}}\">\r\n            <b>{{td?.SalesRep}}</b>\r\n          </ion-label>\r\n          <ion-icon class=\"bottom-icon\" src=\"{{ getIcon(td?.Vehicle) }}\"></ion-icon>\r\n        </ion-col>\r\n        <ion-col class=\"ion-text-start\">\r\n          <ion-label color=\"{{getColor(td?.Vehicle)}}\">{{ td?.ContactName }}</ion-label>\r\n          <ion-label color=\"{{getColor(td?.Vehicle)}}\">{{ td?.Vehicle?.RegNum }}</ion-label>\r\n          <ion-label color=\"{{getColor(td?.Vehicle)}}\">\r\n            <b>{{td?.Vehicle?.Name}}</b>\r\n          </ion-label>\r\n          <ion-label *nfIf=\"countryCode == 'my'\" color=\"{{getColor(td?.Vehicle)}}\">{{ td?.DrivingLicense }}</ion-label>\r\n          <ion-label color=\"{{getColor(td?.Vehicle)}}\">{{ td?.ExpiryDate | date: \"dd MMM y\" }}</ion-label>\r\n          <ion-label color=\"{{getColor(td?.Vehicle)}}\"> {{ td?.PlannedStartDate | date: \"dd MMM y hh:mm a\" }} </ion-label>\r\n          <ion-label>\r\n            <a (click)=\"goToTestdrive(td)\"> {{\"OpportunityTab_ViewDetails\"|translate}} </a>\r\n          </ion-label>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ng-container>\r\n</ion-content>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { HometestdrivesPage } from './hometestdrives.page';\r\nimport { HomeTestdrivePageRoutingKeys } from './hometestdrives-routing.keys';\r\nconst routes: Routes = [\r\n  {\r\n    path: `:${HomeTestdrivePageRoutingKeys.OPP_PARAM_ID}`,\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: HometestdrivesPage,\r\n        pathMatch: 'full',\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class HometestdrivesPageRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Testdrive } from 'src/app/models/common/testdrive.model';\r\nimport { Vehicle } from 'src/app/models/common/vehicle.model';\r\nimport { Router, ActivatedRoute, NavigationExtras } from '@angular/router';\r\nimport { EditTestdrivePageRoutingKeys } from '../edit-testdrive/edit-testdrive-routing.keys';\r\nimport { CommonTestdriveService } from 'src/app/services/common/testdrive/testdrive.service';\r\nimport { Subscription, from } from 'rxjs';\r\nimport { ViewTestdrivePageRoutingKeys } from '../view-testdrive/view-testdrive-routing.keys';\r\nimport { ModalController, LoadingController } from '@ionic/angular';\r\nimport { FilterTestdriveComponent } from './filter-testdrive/filter-testdrive/filter-testdrive.component';\r\nimport { TdFilterModel } from 'src/app/models/common/filter.model';\r\nimport { HomeTestdrivePageRoutingKeys } from './hometestdrives-routing.keys';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { mergeMap, tap } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport * as _ from 'lodash';\r\n\r\nimport { AuthenticationService } from 'src/app/services/common/auth/auth.service';\r\nimport { UserInfo } from 'src/app/models/common/user.model';\r\nimport { ModelInterestSelectorComponent } from 'src/app/components/common/model-interest-selector/model-interest-selector.component';\r\n\r\nimport { CommonOpportunityService } from 'src/app/services/common/opportunity/opportunity.service';\r\n\r\n@Component({\r\n  selector: 'app-hometestdrives',\r\n  templateUrl: './hometestdrives.page.html',\r\n  styleUrls: ['./hometestdrives.page.scss'],\r\n})\r\nexport class HometestdrivesPage implements OnInit {\r\n  private subs = new Subscription();\r\n  testdrives: Testdrive[];\r\n  mytestdrives: Testdrive[];\r\n  oppId: string;\r\n  filterObj: TdFilterModel;\r\n  countryCode = environment.countryCode;\r\n  segment = 'mytestdrive';\r\n  user: UserInfo;\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private testdriveSrvc: CommonTestdriveService,\r\n    private modalCtrl: ModalController,\r\n    private translate: TranslateService,\r\n    private loadingCtrl: LoadingController,\r\n    private auth: AuthenticationService,\r\n    private opportunityService: CommonOpportunityService\r\n  ) {\r\n    this.auth.subUser().subscribe((user) => {\r\n      this.user = user;\r\n      console.log(user);\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.subs.add(this.parseURL());\r\n  }\r\n\r\n  parseURL() {\r\n    return this.route.paramMap.subscribe((params) => {\r\n      this.oppId = params.get(HomeTestdrivePageRoutingKeys.OPP_PARAM_ID);\r\n      this.getTestdrives(null, null, this.segment);\r\n    });\r\n  }\r\n\r\n  async getTestdrives(filter: TdFilterModel, oppId: string, segment: string) {\r\n    return this.translate\r\n      .get('Common_Loading')\r\n      .pipe(\r\n        mergeMap((lang) => {\r\n          return from(\r\n            this.loadingCtrl.create({\r\n              message: lang,\r\n            })\r\n          );\r\n        }),\r\n        mergeMap((loading) => {\r\n          loading.present();\r\n          return this.testdriveSrvc.getTestdrives(filter, oppId, segment).pipe(\r\n            tap(\r\n              (e) => {\r\n                if (segment === 'mytestdrive') {\r\n                  this.mytestdrives = e;\r\n                } else {\r\n                  this.testdrives = e;\r\n                }\r\n                loading.dismiss();\r\n              },\r\n              (err) => {\r\n                loading.dismiss();\r\n              }\r\n            )\r\n          );\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  segmentChanged(ev: any) {\r\n    this.getTestdrives(null, null, this.segment);\r\n  }\r\n\r\n  goToTestdrive(item: Testdrive) {\r\n    this.router.navigate([`${ViewTestdrivePageRoutingKeys.BASE}/${item.Id}`]);\r\n  }\r\n\r\n  getColor(veh: Vehicle) {\r\n    if (veh && this.checkStatus(veh.Status)) {\r\n      return 'primary';\r\n    }\r\n  }\r\n\r\n  getIcon(veh: Vehicle) {\r\n    if (veh && this.checkStatus(veh.Status)) {\r\n      return 'assets/icon/testdrive/active-td.svg';\r\n    } else {\r\n      return 'assets/icon/testdrive/inactive-td.svg';\r\n    }\r\n  }\r\n\r\n  checkStatus(vehStatus: string) {\r\n    return vehStatus === 'VEHICLE OUT' || vehStatus === 'SCHEDULED';\r\n  }\r\n\r\n  showFilter() {\r\n    from(\r\n      this.modalCtrl.create({\r\n        component: FilterTestdriveComponent,\r\n        backdropDismiss: false,\r\n        animated: true,\r\n        cssClass: 'full-screen',\r\n        componentProps: {\r\n          filterObj: this.filterObj ? Object.assign({}, this.filterObj) : null,\r\n        },\r\n      })\r\n    ).subscribe((modal) => {\r\n      from(modal.onDidDismiss()).subscribe((res: any) => {\r\n        if (res && res.data) {\r\n          this.filterObj = res.data;\r\n          this.getTestdrives(this.filterObj, this.oppId, this.segment);\r\n        }\r\n      });\r\n      modal.present();\r\n    });\r\n  }\r\n\r\n  showModelInterestComp() {\r\n    from(\r\n      this.modalCtrl.create({\r\n        component: ModelInterestSelectorComponent,\r\n        componentProps: {\r\n          cmp: '02',\r\n          team: '',\r\n          selectedValues: '',\r\n          singleSelect: true,\r\n        },\r\n      })\r\n    ).subscribe((modal) => {\r\n      from(modal.onDidDismiss()).subscribe((modalData) => {\r\n        if (modalData && modalData.data) {\r\n          const selectedModel: Array<string> = modalData.data.map((model) => model.label);\r\n          // if (\r\n          //   JSON.stringify(this.oppForm.get('modelInterest').value) !==\r\n          //   JSON.stringify(selectedModel)\r\n          // ) {\r\n          //   this.oppForm.get('modelInterest').setValue(selectedModel);\r\n          //   this.oppForm.markAsDirty();\r\n          // }\r\n        }\r\n      });\r\n      modal.present();\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { HometestdrivesPageRoutingModule } from './hometestdrives-routing.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { HometestdrivesPage } from './hometestdrives.page';\r\nimport { FilterTestdriveComponent } from './filter-testdrive/filter-testdrive/filter-testdrive.component';\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, IonicModule, TranslateModule, HometestdrivesPageRoutingModule],\r\n  declarations: [HometestdrivesPage, FilterTestdriveComponent],\r\n})\r\nexport class HometestdrivesPageModule {}\r\n"],"sourceRoot":"webpack:///"}