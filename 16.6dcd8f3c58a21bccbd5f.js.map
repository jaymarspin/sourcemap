{"version":3,"sources":["./src/app/pages/contact/edit-contact/edit-contact.page.html","./src/app/pages/contact/edit-contact/edit-contact-routing.module.ts","./src/app/pages/contact/edit-contact/edit-contact.page.ts","./src/app/pages/contact/edit-contact/edit-contact.module.ts"],"names":["routes","path","PARAM_ID","children","component","EditContactPage","formBuilder","route","translate","router","contactService","alertCtrl","validator","loadingCtrl","navCtrl","subs","Subscription","salutationList","this","getContactSalutation","countryCode","getCountryCodeList","countryList","getCountryList","genderList","getGender","cityList","getCities","stateList","getStates","docList","getContactDocType","raceList","getRace","sysCountryCode","environment","contactForm","initContactForm","add","parseURL","setMobileValidator","contact","paramMap","subscribe","params","contactId","get","e","pageTitle","setValue","getDefaultCountryCode","getContactInfo","getCurrentNavigation","extras","state","states","console","log","STATE_CONTACT","Id","requiredValidators","STATE_VALIDATORS","forEach","el","formCtrl","setValidators","required","formErrorMessages","MobileNo","Name","group","id","title","fullName","prefName","company","docType","docNum","race","gender","mobile","email","birthday","line1","line2","postcode","city","country","remarks","initErrorMessages","validateMobile","updateValueAndValidity","mobileError","control","value","length","err","startsWith","setIDValidator","form","key","Object","keys","controls","valid","Title","PrefName","CompanyName","DocType","DocNum","Race","Gender","CountryCode","Email","Birthday","Line1","Line2","Postcode","City","State","Country","Remarks","pipe","mergeMap","lang","from","create","message","loading","present","upsertContact","res","dismiss","createOppnConvertLead","values","ctrl","markAsTouched","onlySelf","btns","backdropDismiss","alert","forkJoin","tap","header","push","text","handler","back","setTimeout","_","navigateForward","BASE","addOpp","buttons","getContactById","setValues","opp","ContactId","ContactName","STATE_OPP","PAGE_HISTORY","navigationExtras","navigate","done","docTypeChanged","pathMatch","EditContactPageRoutingModule","forChild","EditContactPageModule"],"mappings":"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BACE,mBACE,oBACE,wB,qBACF,OACA,2BACF,OACF,OACA,mBACE,mBACE,oBACE,wB,qBACF,OACA,2BACF,OACF,OACA,mBACE,mBACE,oBACE,yBAAmF,mCAAa,EAAAC,mB,qBAC9F,qCACF,OACF,OACA,2BACF,OACA,mBACE,oBACE,wB,qBACF,OACA,2BACF,OACF,OACA,mBACE,mBACE,oBACE,yB,qBACE,qCACF,OACF,OACA,2BACF,OACA,mBACE,oBACE,yB,qBACE,qCACF,OACF,OACA,2BACF,OACF,OACA,mBACE,mBACE,oBACE,2B,qBACF,OACA,2BACF,OACF,OACA,mBACE,sBACF,OACA,mBACE,sBACE,oBACE,yBAA0C,mCAAa,EAAA5H,uBACrD,qCACF,OACF,OACA,2BACF,OACA,mBACE,oBACE,wB,qBACF,OACA,2BACF,OACF,OACA,mBACE,mBACE,oBACE,wB,qBACF,OACA,2BACF,OACF,OACA,mBACE,mBACE,oBACE,wB,qBACF,OACA,2BACF,OACF,OACA,mBACE,mBACE,oBACE,wB,qBACF,OACA,4BACF,OACF,OACA,oBACE,oBACE,qBACE,yB,sBACF,OACA,4BACF,OACA,6BAQF,OACA,6BAUA,oBACE,oBACE,qBACE,0B,sBACE,sCACF,OACF,OACA,4BACF,OACF,OACF,OACF,OACF,Q,MAxKsC,8CAGH,uCAEpB,0BAIP,wCAKwC,iEACqB,yCAG7C,uFAAuC,sCAMb,+DAE1B,0FAA0C,yCAMhB,oEAE1B,0FAA0C,yCAMjB,8DAEzB,yFAAyC,wCAMf,yDACmB,kCAG7C,yFAAyC,wCAIjB,+DAExB,wFAAwC,uCAMjB,2DACsB,mCAG7C,sFAAsC,qCAIb,6DACoB,qCAG7C,wFAAwC,uCAMgB,+DAExD,0FAA0C,yCAUG,sCAG7C,6FAA6C,4CAIrB,mEAExB,wFAAwC,uCAMjB,4DAEvB,uFAAuC,sCAMhB,mEAEvB,uFAAuC,sCAMhB,mEAEvB,uFAAuC,sCAMb,gEAE1B,0FAA0C,yCAEhD,4CASF,4CAakC,+DACmB,sCAG7C,yFAAyC,0C,ggBE/I1D,GDVC6H,UAAW,WAUZ,Y,MAAMC,G,8BAAAA,I,oDAAAA,IAA4B,SAH9B,CAAC,IAAaC,SAASvK,IACtB,O,GAEL,G,gBEPA,Y,MAAMwK,G,8BAAAA,I,oDAAAA,IAAqB,SAHvB,CAAC,IAAc,IAAa,KAAa,IAAqB,IAAiB,IAAwB,M,GAG3G","file":"16.6dcd8f3c58a21bccbd5f.js","sourcesContent":["<ion-header>\r\n  <ion-toolbar color=\"primary\" mode=\"ios\">\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"\" text=\"{{'Common_Back'|translate}}\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-buttons slot=\"end\">\r\n      <ion-button (click)=\"done()\">{{'Common_Done'|translate}}</ion-button>\r\n    </ion-buttons>\r\n    <ion-title>{{pageTitle}}</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n<ion-content scroll=\"true\">\r\n  <form [formGroup]=\"contactForm\">\r\n    <ion-grid class=\"ion-no-padding\">\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-select formControlName=\"title\" placeholder='{{\"EditContact_Salutation\"|translate}}'>\r\n              <ion-select-option [value]=\"opt.value\" *ngFor=\"let opt of salutationList\">{{ opt.label }}</ion-select-option>\r\n            </ion-select>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.title\" [messages]=\"formErrorMessages.title\"></app-item-err>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-input formControlName=\"fullName\" placeholder='{{\"EditContact_FullName\"|translate}}'></ion-input>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.fullName\" [messages]=\"formErrorMessages.fullName\"></app-item-err>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-input formControlName=\"prefName\" placeholder='{{\"EditContact_PreferredName\"|translate}}'></ion-input>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.prefName\" [messages]=\"formErrorMessages.prefName\"></app-item-err>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-input formControlName=\"company\" placeholder='{{\"EditContact_Company\"|translate}}'></ion-input>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.company\" [messages]=\"formErrorMessages.company\"></app-item-err>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-select formControlName=\"docType\" placeholder='{{\"EditContact_ID\"|translate}}' (ionChange)=\"docTypeChanged()\">\r\n              <ion-select-option [value]=\"opt.value\" *ngFor=\"let opt of docList\">{{ opt.label }}</ion-select-option>\r\n            </ion-select>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.docType\" [messages]=\"formErrorMessages.docType\"></app-item-err>\r\n        </ion-col>\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-input formControlName=\"docNum\" placeholder='{{\"EditContact_IDNumber\"|translate}}'></ion-input>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.docNum\" [messages]=\"formErrorMessages.docNum\"></app-item-err>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-select formControlName=\"race\" placeholder='{{\"EditContact_Race\"|translate}}'>\r\n              <ion-select-option [value]=\"opt.value\" *ngFor=\"let opt of raceList\">{{ opt.label }}</ion-select-option>\r\n            </ion-select>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.race\" [messages]=\"formErrorMessages.race\"></app-item-err>\r\n        </ion-col>\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-select formControlName=\"gender\" placeholder='{{\"EditContact_Gender\"|translate}}'>\r\n              <ion-select-option [value]=\"opt.value\" *ngFor=\"let opt of genderList\">{{ opt.label }}</ion-select-option>\r\n            </ion-select>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.gender\" [messages]=\"formErrorMessages.gender\"></app-item-err>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-datetime displayFormat=\"MM/DD/YYYY\" formControlName=\"birthday\" placeholder='{{\"EditContact_Birthday\"|translate}}'></ion-datetime>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.birthday\" [messages]=\"formErrorMessages.birthday\"></app-item-err>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col size=\"12\" class=\"ion-no-padding ion-no-margin border-gap\"></ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col size=\"4\">\r\n          <ion-item>\r\n            <ion-select formControlName=\"countryCode\" (ionChange)=\"setMobileValidator()\">\r\n              <ion-select-option [value]=\"opt.value\" *ngFor=\"let opt of countryCode\">{{ opt.label }}</ion-select-option>\r\n            </ion-select>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.countryCode\" [messages]=\"formErrorMessages.countryCode\"></app-item-err>\r\n        </ion-col>\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-input formControlName=\"mobile\" placeholder='{{\"EditContact_MobileNumber\"|translate}}'></ion-input>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.mobile\" [messages]=\"formErrorMessages.mobile\"></app-item-err>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-input formControlName=\"email\" placeholder='{{\"EditContact_Email\"|translate}}'></ion-input>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.email\" [messages]=\"formErrorMessages.email\"></app-item-err>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-input formControlName=\"line1\" placeholder='{{\"EditContact_AddressLine1\"|translate}}'></ion-input>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.line1\" [messages]=\"formErrorMessages.line1\"></app-item-err>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-input formControlName=\"line2\" placeholder='{{\"EditContact_AddressLine2\"|translate}}'></ion-input>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.line2\" [messages]=\"formErrorMessages.line2\"></app-item-err>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-input formControlName=\"postcode\" placeholder='{{\"EditContact_Postcode\"|translate}}'></ion-input>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.postcode\" [messages]=\"formErrorMessages.postcode\"></app-item-err>\r\n        </ion-col>\r\n        <ion-col *ngIf=\"sysCountryCode == 'my'\">\r\n          <ion-item>\r\n            <ion-select formControlName=\"city\" placeholder='{{\"EditContact_City\"|translate}}'>\r\n              <ion-select-option [value]=\"opt.value\" *ngFor=\"let opt of cityList\"> {{ opt.label }}</ion-select-option>\r\n            </ion-select>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.city\" [messages]=\"formErrorMessages.city\"></app-item-err>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row *ngIf=\"sysCountryCode == 'my'\">\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-select formControlName=\"state\" placeholder='{{\"EditContact_State\"|translate}}' readonly>\r\n              <ion-select-option [value]=\"opt.value\" *ngFor=\"let opt of stateList\"> {{ opt.label }}</ion-select-option>\r\n            </ion-select>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.state\" [messages]=\"formErrorMessages.state\"></app-item-err>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-select formControlName=\"country\" placeholder='{{\"EditContact_Country\"|translate}}' readonly>\r\n              <ion-select-option [value]=\"opt.value\" *ngFor=\"let opt of countryList\"> {{ opt.label }}</ion-select-option>\r\n            </ion-select>\r\n          </ion-item>\r\n          <app-item-err [control]=\"contactForm.controls?.country\" [messages]=\"formErrorMessages.country\"></app-item-err>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </form>\r\n</ion-content>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { EditContactPage } from './edit-contact.page';\r\nimport { EditContactPageRoutingKeys } from './edit-contact-routing.keys';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: `:${EditContactPageRoutingKeys.PARAM_ID}`,\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: EditContactPage,\r\n        pathMatch: 'full',\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class EditContactPageRoutingModule {}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormGroup, ValidatorFn, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, NavigationExtras, Router } from '@angular/router';\r\nimport { AlertController, LoadingController, NavController } from '@ionic/angular';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { forkJoin, from, Subscription } from 'rxjs';\r\nimport { mergeMap, tap } from 'rxjs/operators';\r\nimport { IContactValidator } from 'src/app/interfaces/contact-validator.interface';\r\nimport { ContactModel } from 'src/app/models/common/contact.model';\r\nimport { FormErrorMessages } from 'src/app/models/common/form-error.model';\r\nimport { Opportunity } from 'src/app/models/common/opportunity.model';\r\nimport { CONTACT_VALIDATOR_KEY } from 'src/app/service-providers/dynamic-key.provider';\r\nimport { CommonContactService } from 'src/app/services/common/contact/contact.service';\r\nimport { EditOpportunityPageRoutingKeys } from '../../opportunity/edit-opportunity/edit-opportunity.keys';\r\nimport { ViewContactPageRoutingKeys } from '../view-contact/view-contact-routing.keys';\r\nimport { EditContactPageRoutingKeys } from './edit-contact-routing.keys';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-edit-contact',\r\n  templateUrl: './edit-contact.page.html',\r\n  styleUrls: ['./edit-contact.page.scss'],\r\n})\r\nexport class EditContactPage implements OnInit {\r\n  pageTitle: string;\r\n  private subs = new Subscription();\r\n  contactForm: FormGroup;\r\n  formErrorMessages: FormErrorMessages;\r\n  salutationList = this.contactService.getContactSalutation();\r\n  countryCode = this.contactService.getCountryCodeList();\r\n  countryList = this.contactService.getCountryList();\r\n  genderList = this.contactService.getGender();\r\n  cityList = this.contactService.getCities();\r\n  stateList = this.contactService.getStates();\r\n  docList = this.contactService.getContactDocType();\r\n  raceList = this.contactService.getRace();\r\n  sysCountryCode = environment.countryCode;\r\n  states: object;\r\n  contact: ContactModel;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private translate: TranslateService,\r\n    private router: Router,\r\n    private contactService: CommonContactService,\r\n    private alertCtrl: AlertController,\r\n    @Inject(CONTACT_VALIDATOR_KEY) private validator: IContactValidator,\r\n    private loadingCtrl: LoadingController,\r\n    private navCtrl: NavController\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.contactForm = this.initContactForm();\r\n    this.subs.add(this.parseURL());\r\n    this.setMobileValidator();\r\n  }\r\n\r\n  parseURL() {\r\n    this.contact = new ContactModel();\r\n    return this.route.paramMap.subscribe((params) => {\r\n      const contactId = params.get(EditContactPageRoutingKeys.PARAM_ID);\r\n      if (contactId === EditContactPageRoutingKeys.PARAM_ID) {\r\n        this.translate.get('EditContact_AddContact').subscribe((e) => {\r\n          this.pageTitle = e;\r\n          this.contactForm.get('countryCode').setValue(this.contactService.getDefaultCountryCode());\r\n        });\r\n      } else {\r\n        this.translate.get('EditContact_EditContact').subscribe((e) => {\r\n          this.pageTitle = e;\r\n          this.getContactInfo(contactId);\r\n        });\r\n      }\r\n      if (this.router.getCurrentNavigation().extras.state) {\r\n        this.states = this.router.getCurrentNavigation().extras.state;\r\n        console.log(this.states);\r\n        this.contact = this.states[EditContactPageRoutingKeys.STATE_CONTACT];\r\n        this.contact.Id = contactId === EditContactPageRoutingKeys.PARAM_ID ? null : contactId;\r\n        const requiredValidators = this.states[EditContactPageRoutingKeys.STATE_VALIDATORS];\r\n        if (requiredValidators) {\r\n          requiredValidators.forEach((el) => {\r\n            const formCtrl = this.contactForm.get(el);\r\n            const existingValidators = formCtrl.validator ? [formCtrl.validator] : [];\r\n            formCtrl.setValidators([...existingValidators, Validators.required]);\r\n            const existingErr = this.formErrorMessages[el] ? this.formErrorMessages[el] : {};\r\n            this.formErrorMessages[el] = {\r\n              ...existingErr,\r\n              required: 'Cannot be empty.',\r\n            };\r\n          });\r\n        }\r\n        this.contactForm.get('mobile').setValue(this.contact.MobileNo);\r\n        this.contactForm.get('fullName').setValue(this.contact.Name);\r\n      }\r\n    });\r\n  }\r\n\r\n  private initContactForm(): FormGroup {\r\n    const contactForm = this.formBuilder.group({\r\n      id: [''],\r\n      title: ['', [Validators.required]],\r\n      fullName: ['', [Validators.required]],\r\n      prefName: [''],\r\n      company: [''],\r\n      docType: [''],\r\n      docNum: [''],\r\n      race: [''],\r\n      gender: ['', [Validators.required]],\r\n      countryCode: [''],\r\n      mobile: [''],\r\n      email: ['', [Validators.email]],\r\n      birthday: [''],\r\n      line1: [''],\r\n      line2: [''],\r\n      postcode: [''],\r\n      city: [''],\r\n      state: [''],\r\n      country: [''],\r\n      remarks: [''],\r\n    });\r\n    this.initErrorMessages(contactForm);\r\n    return contactForm;\r\n  }\r\n\r\n  setMobileValidator() {\r\n    const formCtrl = this.contactForm.get('mobile');\r\n    formCtrl.setValidators([this.validateMobile(), Validators.required]);\r\n    formCtrl.updateValueAndValidity();\r\n    this.formErrorMessages[`mobile`] = {\r\n      mobileError: 'Invalid Mobile Number.',\r\n    };\r\n  }\r\n\r\n  validateMobile(): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } | null => {\r\n      if (!control.value || control.value.length <= 0) {\r\n        return null;\r\n      }\r\n      const err = { mobileError: { value: control.value } };\r\n      if (this.contactForm.get('countryCode').value === '65') {\r\n        if (control.value.length !== 8) {\r\n          return err;\r\n        }\r\n        if (!control.value.startsWith('9') && !control.value.startsWith('8')) {\r\n          return err;\r\n        }\r\n      } else {\r\n        if (control.value.length < 9) {\r\n          return err;\r\n        }\r\n      }\r\n      return null;\r\n    };\r\n  }\r\n\r\n  docTypeChanged() {\r\n    this.contactForm = this.validator.setIDValidator(this.contactForm, this.formErrorMessages);\r\n  }\r\n\r\n  private initErrorMessages(form: FormGroup) {\r\n    this.formErrorMessages = {\r\n      group: {},\r\n    };\r\n    if (!form) {\r\n      return;\r\n    }\r\n    for (const key of Object.keys(form.controls)) {\r\n      switch (key) {\r\n        case 'email':\r\n          this.formErrorMessages[key] = {\r\n            email: 'Invalid email.',\r\n          };\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  done() {\r\n    if (!this.contactForm.valid) {\r\n      Object.values(this.contactForm.controls).forEach((ctrl) => {\r\n        ctrl.markAsTouched({ onlySelf: true });\r\n      });\r\n      return;\r\n    }\r\n    this.contact.Title = this.contactForm.get('title').value;\r\n    this.contact.Name = this.contactForm.get('fullName').value;\r\n    this.contact.PrefName = this.contactForm.get('prefName').value;\r\n    this.contact.CompanyName = this.contactForm.get('company').value;\r\n    this.contact.DocType = this.contactForm.get('docType').value;\r\n    this.contact.DocNum = this.contactForm.get('docNum').value;\r\n    this.contact.Race = this.contactForm.get('race').value;\r\n    this.contact.Gender = this.contactForm.get('gender').value;\r\n    this.contact.MobileNo = this.contactForm.get('mobile').value;\r\n    this.contact.CountryCode = this.contactForm.get('countryCode').value;\r\n    this.contact.Email = this.contactForm.get('email').value;\r\n    this.contact.Birthday = this.contactForm.get('birthday').value;\r\n    this.contact.Line1 = this.contactForm.get('line1').value;\r\n    this.contact.Line2 = this.contactForm.get('line2').value;\r\n    this.contact.Postcode = this.contactForm.get('postcode').value;\r\n    this.contact.City = this.contactForm.get('city').value;\r\n    this.contact.State = this.contactForm.get('state').value;\r\n    this.contact.Country = this.contactForm.get('country').value;\r\n    this.contact.Remarks = this.contactForm.get('remarks').value;\r\n    this.translate\r\n      .get('Common_Saving')\r\n      .pipe(\r\n        mergeMap((lang) => {\r\n          return from(\r\n            this.loadingCtrl.create({\r\n              message: lang,\r\n            })\r\n          );\r\n        })\r\n      )\r\n      .subscribe(\r\n        (loading) => {\r\n          loading.present();\r\n          return this.contactService.upsertContact(this.contact).subscribe(\r\n            (res) => {\r\n              loading.dismiss();\r\n              if (res) {\r\n                this.createOppnConvertLead(res);\r\n              }\r\n            },\r\n            (err) => {\r\n              loading.dismiss();\r\n              // add error service call\r\n            }\r\n          );\r\n        },\r\n        (err) => {\r\n          console.log(err);\r\n          // add error service call\r\n        }\r\n      );\r\n  }\r\n\r\n  createOppnConvertLead(res: ContactModel) {\r\n    const btns = [];\r\n    from(\r\n      this.alertCtrl.create({\r\n        backdropDismiss: false,\r\n      })\r\n    )\r\n      .pipe(\r\n        mergeMap((alert) => {\r\n          return forkJoin([\r\n            this.translate.get('EditContact_CreateNewOpportunity').pipe(\r\n              tap((lang) => {\r\n                alert.header = lang;\r\n              })\r\n            ),\r\n            this.translate.get('Common_No').pipe(\r\n              tap((lang) => {\r\n                btns.push({\r\n                  text: lang,\r\n                  handler: () => {\r\n                    this.contact.Id = res.Id;\r\n                    this.navCtrl.back();\r\n                    setTimeout((_) => {\r\n                      this.navCtrl.navigateForward(ViewContactPageRoutingKeys.BASE + '/' + this.contact.Id);\r\n                    }, 1000);\r\n                  },\r\n                });\r\n              })\r\n            ),\r\n            this.translate.get('Common_Yes').pipe(\r\n              tap((lang) => {\r\n                btns.push({\r\n                  text: lang,\r\n                  handler: () => {\r\n                    this.contact.Id = res.Id;\r\n                    this.contact.Name = res.Name;\r\n                    this.addOpp();\r\n                  },\r\n                });\r\n              })\r\n            ),\r\n          ]).pipe(\r\n            tap(() => {\r\n              alert.buttons = btns;\r\n              alert.present();\r\n            })\r\n          );\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  getContactInfo(id: string) {\r\n    this.translate\r\n      .get('Common_Loading')\r\n      .pipe(\r\n        mergeMap((lang) => {\r\n          return from(\r\n            this.loadingCtrl.create({\r\n              message: lang,\r\n            })\r\n          );\r\n        }),\r\n        mergeMap((loading) => {\r\n          loading.present();\r\n          return this.contactService.getContactById(id).pipe(\r\n            tap(\r\n              (e) => {\r\n                loading.dismiss();\r\n                this.contact = e;\r\n                this.setValues();\r\n              },\r\n              (err) => {\r\n                loading.dismiss();\r\n              }\r\n            )\r\n          );\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  setValues() {\r\n    this.contactForm.get('title').setValue(this.contact.Title);\r\n    this.contactForm.get('fullName').setValue(this.contact.Name);\r\n    this.contactForm.get('prefName').setValue(this.contact.PrefName);\r\n    this.contactForm.get('company').setValue(this.contact.CompanyName);\r\n    this.contactForm.get('docType').setValue(this.contact.DocType);\r\n    this.contactForm.get('docNum').setValue(this.contact.DocNum);\r\n    this.contactForm.get('race').setValue(this.contact.Race);\r\n    this.contactForm.get('gender').setValue(this.contact.Gender);\r\n    this.contactForm.get('mobile').setValue(this.contact.MobileNo);\r\n    this.contactForm.get('countryCode').setValue(this.contact.CountryCode);\r\n    this.contactForm.get('email').setValue(this.contact.Email);\r\n    this.contactForm.get('birthday').setValue(this.contact.Birthday);\r\n    this.contactForm.get('line1').setValue(this.contact.Line1);\r\n    this.contactForm.get('line2').setValue(this.contact.Line2);\r\n    this.contactForm.get('postcode').setValue(this.contact.Postcode);\r\n    this.contactForm.get('city').setValue(this.contact.City);\r\n    this.contactForm.get('state').setValue(this.contact.State);\r\n    this.contactForm.get('country').setValue(this.contact.Country);\r\n    this.contactForm.get('remarks').setValue(this.contact.Remarks);\r\n  }\r\n\r\n  addOpp() {\r\n    const state = new Object();\r\n    const opp = new Opportunity();\r\n    opp.ContactId = this.contact.Id;\r\n    opp.ContactName = this.contact.Name;\r\n    state[EditOpportunityPageRoutingKeys.STATE_OPP] = opp;\r\n    state[EditOpportunityPageRoutingKeys.PAGE_HISTORY] = 'new_contact';\r\n    const navigationExtras: NavigationExtras = {\r\n      state,\r\n    };\r\n    console.log(state);\r\n    this.router.navigate([`${EditOpportunityPageRoutingKeys.BASE}/${EditOpportunityPageRoutingKeys.PARAM_ID}`], navigationExtras);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { EditContactPageRoutingModule } from './edit-contact-routing.module';\r\n\r\nimport { EditContactPage } from './edit-contact.page';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ItemErrComponentModule } from 'src/app/components/common/item-err/item-err.module';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, IonicModule, ReactiveFormsModule, TranslateModule, ItemErrComponentModule, EditContactPageRoutingModule],\r\n  declarations: [EditContactPage],\r\n})\r\nexport class EditContactPageModule {}\r\n"],"sourceRoot":"webpack:///"}